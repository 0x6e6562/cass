/* Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/cassandra"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  login(auth_request *AuthenticationRequest) (authnx *AuthenticationException, authzx *AuthorizationException, err error)\n")
  fmt.Fprint(os.Stderr, "  set_keyspace(keyspace string) (ire *InvalidRequestException, err error)\n")
  fmt.Fprint(os.Stderr, "  get(key string, column_path *ColumnPath, consistency_level ConsistencyLevel) (retval1353 *ColumnOrSuperColumn, ire *InvalidRequestException, nfe *NotFoundException, ue *UnavailableException, te *TimedOutException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_slice(key string, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval1354 thrift.TList, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_count(key string, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval1355 int32, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)\n")
  fmt.Fprint(os.Stderr, "  multiget_slice(keys thrift.TList, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval1356 thrift.TMap, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)\n")
  fmt.Fprint(os.Stderr, "  multiget_count(keys thrift.TList, column_parent *ColumnParent, predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval1357 thrift.TMap, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_range_slices(column_parent *ColumnParent, predicate *SlicePredicate, range_a1 *KeyRange, consistency_level ConsistencyLevel) (retval1358 thrift.TList, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_paged_slice(column_family string, range_a1 *KeyRange, start_column string, consistency_level ConsistencyLevel) (retval1359 thrift.TList, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)\n")
  fmt.Fprint(os.Stderr, "  get_indexed_slices(column_parent *ColumnParent, index_clause *IndexClause, column_predicate *SlicePredicate, consistency_level ConsistencyLevel) (retval1360 thrift.TList, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)\n")
  fmt.Fprint(os.Stderr, "  insert(key string, column_parent *ColumnParent, column *Column, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)\n")
  fmt.Fprint(os.Stderr, "  add(key string, column_parent *ColumnParent, column *CounterColumn, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)\n")
  fmt.Fprint(os.Stderr, "  remove(key string, column_path *ColumnPath, timestamp int64, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)\n")
  fmt.Fprint(os.Stderr, "  remove_counter(key string, path *ColumnPath, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)\n")
  fmt.Fprint(os.Stderr, "  batch_mutate(mutation_map thrift.TMap, consistency_level ConsistencyLevel) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)\n")
  fmt.Fprint(os.Stderr, "  truncate(cfname string) (ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, err error)\n")
  fmt.Fprint(os.Stderr, "  describe_schema_versions() (retval1367 thrift.TMap, ire *InvalidRequestException, err error)\n")
  fmt.Fprint(os.Stderr, "  describe_keyspaces() (retval1368 thrift.TList, ire *InvalidRequestException, err error)\n")
  fmt.Fprint(os.Stderr, "  describe_cluster_name() (retval1369 string, err error)\n")
  fmt.Fprint(os.Stderr, "  describe_version() (retval1370 string, err error)\n")
  fmt.Fprint(os.Stderr, "  describe_ring(keyspace string) (retval1371 thrift.TList, ire *InvalidRequestException, err error)\n")
  fmt.Fprint(os.Stderr, "  describe_partitioner() (retval1372 string, err error)\n")
  fmt.Fprint(os.Stderr, "  describe_snitch() (retval1373 string, err error)\n")
  fmt.Fprint(os.Stderr, "  describe_keyspace(keyspace string) (retval1374 *KsDef, nfe *NotFoundException, ire *InvalidRequestException, err error)\n")
  fmt.Fprint(os.Stderr, "  describe_splits(cfName string, start_token string, end_token string, keys_per_split int32) (retval1375 thrift.TList, ire *InvalidRequestException, err error)\n")
  fmt.Fprint(os.Stderr, "  system_add_column_family(cf_def *CfDef) (retval1376 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error)\n")
  fmt.Fprint(os.Stderr, "  system_drop_column_family(column_family string) (retval1377 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error)\n")
  fmt.Fprint(os.Stderr, "  system_add_keyspace(ks_def *KsDef) (retval1378 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error)\n")
  fmt.Fprint(os.Stderr, "  system_drop_keyspace(keyspace string) (retval1379 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error)\n")
  fmt.Fprint(os.Stderr, "  system_update_keyspace(ks_def *KsDef) (retval1380 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error)\n")
  fmt.Fprint(os.Stderr, "  system_update_column_family(cf_def *CfDef) (retval1381 string, ire *InvalidRequestException, sde *SchemaDisagreementException, err error)\n")
  fmt.Fprint(os.Stderr, "  execute_cql_query(query string, compression Compression) (retval1382 *CqlResult, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, sde *SchemaDisagreementException, err error)\n")
  fmt.Fprint(os.Stderr, "  prepare_cql_query(query string, compression Compression) (retval1383 *CqlPreparedResult, ire *InvalidRequestException, err error)\n")
  fmt.Fprint(os.Stderr, "  execute_prepared_cql_query(itemId int32, values thrift.TList) (retval1384 *CqlResult, ire *InvalidRequestException, ue *UnavailableException, te *TimedOutException, sde *SchemaDisagreementException, err error)\n")
  fmt.Fprint(os.Stderr, "  set_cql_version(version string) (ire *InvalidRequestException, err error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.Error(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.Error(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.Error())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.Error())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := cassandra.NewCassandraClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.Error())
    os.Exit(1)
  }
  
  switch cmd {
  case "login":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "Login requires 1 args\n")
      flag.Usage()
    }
    arg1386 := flag.Arg(1)
    mbTrans1387 := thrift.NewTMemoryBufferLen(len(arg1386))
    defer mbTrans1387.Close()
    _, err1388 := mbTrans1387.WriteString(arg1386)
    if err1388 != nil {
      Usage()
      return
    }
    factory1389 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1390 := factory1389.GetProtocol(mbTrans1387)
    argvalue0 := cassandra.NewAuthenticationRequest()
    err1391 := argvalue0.Read(jsProt1390)
    if err1391 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Login(value0))
    fmt.Print("\n")
    break
  case "set_keyspace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SetKeyspace requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SetKeyspace(value0))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "Get requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1394 := flag.Arg(2)
    mbTrans1395 := thrift.NewTMemoryBufferLen(len(arg1394))
    defer mbTrans1395.Close()
    _, err1396 := mbTrans1395.WriteString(arg1394)
    if err1396 != nil {
      Usage()
      return
    }
    factory1397 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1398 := factory1397.GetProtocol(mbTrans1395)
    argvalue1 := cassandra.NewColumnPath()
    err1399 := argvalue1.Read(jsProt1398)
    if err1399 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := cassandra.ConsistencyLevel(tmp2)
    value2 := argvalue2
    fmt.Print(client.Get(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_slice":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "GetSlice requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1401 := flag.Arg(2)
    mbTrans1402 := thrift.NewTMemoryBufferLen(len(arg1401))
    defer mbTrans1402.Close()
    _, err1403 := mbTrans1402.WriteString(arg1401)
    if err1403 != nil {
      Usage()
      return
    }
    factory1404 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1405 := factory1404.GetProtocol(mbTrans1402)
    argvalue1 := cassandra.NewColumnParent()
    err1406 := argvalue1.Read(jsProt1405)
    if err1406 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1407 := flag.Arg(3)
    mbTrans1408 := thrift.NewTMemoryBufferLen(len(arg1407))
    defer mbTrans1408.Close()
    _, err1409 := mbTrans1408.WriteString(arg1407)
    if err1409 != nil {
      Usage()
      return
    }
    factory1410 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1411 := factory1410.GetProtocol(mbTrans1408)
    argvalue2 := cassandra.NewSlicePredicate()
    err1412 := argvalue2.Read(jsProt1411)
    if err1412 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetSlice(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_count":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "GetCount requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1414 := flag.Arg(2)
    mbTrans1415 := thrift.NewTMemoryBufferLen(len(arg1414))
    defer mbTrans1415.Close()
    _, err1416 := mbTrans1415.WriteString(arg1414)
    if err1416 != nil {
      Usage()
      return
    }
    factory1417 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1418 := factory1417.GetProtocol(mbTrans1415)
    argvalue1 := cassandra.NewColumnParent()
    err1419 := argvalue1.Read(jsProt1418)
    if err1419 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1420 := flag.Arg(3)
    mbTrans1421 := thrift.NewTMemoryBufferLen(len(arg1420))
    defer mbTrans1421.Close()
    _, err1422 := mbTrans1421.WriteString(arg1420)
    if err1422 != nil {
      Usage()
      return
    }
    factory1423 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1424 := factory1423.GetProtocol(mbTrans1421)
    argvalue2 := cassandra.NewSlicePredicate()
    err1425 := argvalue2.Read(jsProt1424)
    if err1425 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetCount(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "multiget_slice":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "MultigetSlice requires 4 args\n")
      flag.Usage()
    }
    arg1426 := flag.Arg(1)
    mbTrans1427 := thrift.NewTMemoryBufferLen(len(arg1426))
    defer mbTrans1427.Close()
    _, err1428 := mbTrans1427.WriteString(arg1426)
    if err1428 != nil { 
      Usage()
      return
    }
    factory1429 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1430 := factory1429.GetProtocol(mbTrans1427)
    containerStruct0 := cassandra.NewMultigetSliceArgs()
    err1431 := containerStruct0.ReadField1(jsProt1430)
    if err1431 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Keys
    value0 := argvalue0
    arg1432 := flag.Arg(2)
    mbTrans1433 := thrift.NewTMemoryBufferLen(len(arg1432))
    defer mbTrans1433.Close()
    _, err1434 := mbTrans1433.WriteString(arg1432)
    if err1434 != nil {
      Usage()
      return
    }
    factory1435 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1436 := factory1435.GetProtocol(mbTrans1433)
    argvalue1 := cassandra.NewColumnParent()
    err1437 := argvalue1.Read(jsProt1436)
    if err1437 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1438 := flag.Arg(3)
    mbTrans1439 := thrift.NewTMemoryBufferLen(len(arg1438))
    defer mbTrans1439.Close()
    _, err1440 := mbTrans1439.WriteString(arg1438)
    if err1440 != nil {
      Usage()
      return
    }
    factory1441 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1442 := factory1441.GetProtocol(mbTrans1439)
    argvalue2 := cassandra.NewSlicePredicate()
    err1443 := argvalue2.Read(jsProt1442)
    if err1443 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.MultigetSlice(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "multiget_count":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "MultigetCount requires 4 args\n")
      flag.Usage()
    }
    arg1444 := flag.Arg(1)
    mbTrans1445 := thrift.NewTMemoryBufferLen(len(arg1444))
    defer mbTrans1445.Close()
    _, err1446 := mbTrans1445.WriteString(arg1444)
    if err1446 != nil { 
      Usage()
      return
    }
    factory1447 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1448 := factory1447.GetProtocol(mbTrans1445)
    containerStruct0 := cassandra.NewMultigetCountArgs()
    err1449 := containerStruct0.ReadField1(jsProt1448)
    if err1449 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Keys
    value0 := argvalue0
    arg1450 := flag.Arg(2)
    mbTrans1451 := thrift.NewTMemoryBufferLen(len(arg1450))
    defer mbTrans1451.Close()
    _, err1452 := mbTrans1451.WriteString(arg1450)
    if err1452 != nil {
      Usage()
      return
    }
    factory1453 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1454 := factory1453.GetProtocol(mbTrans1451)
    argvalue1 := cassandra.NewColumnParent()
    err1455 := argvalue1.Read(jsProt1454)
    if err1455 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1456 := flag.Arg(3)
    mbTrans1457 := thrift.NewTMemoryBufferLen(len(arg1456))
    defer mbTrans1457.Close()
    _, err1458 := mbTrans1457.WriteString(arg1456)
    if err1458 != nil {
      Usage()
      return
    }
    factory1459 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1460 := factory1459.GetProtocol(mbTrans1457)
    argvalue2 := cassandra.NewSlicePredicate()
    err1461 := argvalue2.Read(jsProt1460)
    if err1461 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.MultigetCount(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_range_slices":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "GetRangeSlices requires 4 args\n")
      flag.Usage()
    }
    arg1462 := flag.Arg(1)
    mbTrans1463 := thrift.NewTMemoryBufferLen(len(arg1462))
    defer mbTrans1463.Close()
    _, err1464 := mbTrans1463.WriteString(arg1462)
    if err1464 != nil {
      Usage()
      return
    }
    factory1465 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1466 := factory1465.GetProtocol(mbTrans1463)
    argvalue0 := cassandra.NewColumnParent()
    err1467 := argvalue0.Read(jsProt1466)
    if err1467 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1468 := flag.Arg(2)
    mbTrans1469 := thrift.NewTMemoryBufferLen(len(arg1468))
    defer mbTrans1469.Close()
    _, err1470 := mbTrans1469.WriteString(arg1468)
    if err1470 != nil {
      Usage()
      return
    }
    factory1471 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1472 := factory1471.GetProtocol(mbTrans1469)
    argvalue1 := cassandra.NewSlicePredicate()
    err1473 := argvalue1.Read(jsProt1472)
    if err1473 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1474 := flag.Arg(3)
    mbTrans1475 := thrift.NewTMemoryBufferLen(len(arg1474))
    defer mbTrans1475.Close()
    _, err1476 := mbTrans1475.WriteString(arg1474)
    if err1476 != nil {
      Usage()
      return
    }
    factory1477 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1478 := factory1477.GetProtocol(mbTrans1475)
    argvalue2 := cassandra.NewKeyRange()
    err1479 := argvalue2.Read(jsProt1478)
    if err1479 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetRangeSlices(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_paged_slice":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "GetPagedSlice requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1481 := flag.Arg(2)
    mbTrans1482 := thrift.NewTMemoryBufferLen(len(arg1481))
    defer mbTrans1482.Close()
    _, err1483 := mbTrans1482.WriteString(arg1481)
    if err1483 != nil {
      Usage()
      return
    }
    factory1484 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1485 := factory1484.GetProtocol(mbTrans1482)
    argvalue1 := cassandra.NewKeyRange()
    err1486 := argvalue1.Read(jsProt1485)
    if err1486 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPagedSlice(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_indexed_slices":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "GetIndexedSlices requires 4 args\n")
      flag.Usage()
    }
    arg1488 := flag.Arg(1)
    mbTrans1489 := thrift.NewTMemoryBufferLen(len(arg1488))
    defer mbTrans1489.Close()
    _, err1490 := mbTrans1489.WriteString(arg1488)
    if err1490 != nil {
      Usage()
      return
    }
    factory1491 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1492 := factory1491.GetProtocol(mbTrans1489)
    argvalue0 := cassandra.NewColumnParent()
    err1493 := argvalue0.Read(jsProt1492)
    if err1493 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1494 := flag.Arg(2)
    mbTrans1495 := thrift.NewTMemoryBufferLen(len(arg1494))
    defer mbTrans1495.Close()
    _, err1496 := mbTrans1495.WriteString(arg1494)
    if err1496 != nil {
      Usage()
      return
    }
    factory1497 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1498 := factory1497.GetProtocol(mbTrans1495)
    argvalue1 := cassandra.NewIndexClause()
    err1499 := argvalue1.Read(jsProt1498)
    if err1499 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1500 := flag.Arg(3)
    mbTrans1501 := thrift.NewTMemoryBufferLen(len(arg1500))
    defer mbTrans1501.Close()
    _, err1502 := mbTrans1501.WriteString(arg1500)
    if err1502 != nil {
      Usage()
      return
    }
    factory1503 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1504 := factory1503.GetProtocol(mbTrans1501)
    argvalue2 := cassandra.NewSlicePredicate()
    err1505 := argvalue2.Read(jsProt1504)
    if err1505 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetIndexedSlices(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "insert":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "Insert requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1507 := flag.Arg(2)
    mbTrans1508 := thrift.NewTMemoryBufferLen(len(arg1507))
    defer mbTrans1508.Close()
    _, err1509 := mbTrans1508.WriteString(arg1507)
    if err1509 != nil {
      Usage()
      return
    }
    factory1510 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1511 := factory1510.GetProtocol(mbTrans1508)
    argvalue1 := cassandra.NewColumnParent()
    err1512 := argvalue1.Read(jsProt1511)
    if err1512 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1513 := flag.Arg(3)
    mbTrans1514 := thrift.NewTMemoryBufferLen(len(arg1513))
    defer mbTrans1514.Close()
    _, err1515 := mbTrans1514.WriteString(arg1513)
    if err1515 != nil {
      Usage()
      return
    }
    factory1516 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1517 := factory1516.GetProtocol(mbTrans1514)
    argvalue2 := cassandra.NewColumn()
    err1518 := argvalue2.Read(jsProt1517)
    if err1518 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.Insert(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "add":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "Add requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1520 := flag.Arg(2)
    mbTrans1521 := thrift.NewTMemoryBufferLen(len(arg1520))
    defer mbTrans1521.Close()
    _, err1522 := mbTrans1521.WriteString(arg1520)
    if err1522 != nil {
      Usage()
      return
    }
    factory1523 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1524 := factory1523.GetProtocol(mbTrans1521)
    argvalue1 := cassandra.NewColumnParent()
    err1525 := argvalue1.Read(jsProt1524)
    if err1525 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg1526 := flag.Arg(3)
    mbTrans1527 := thrift.NewTMemoryBufferLen(len(arg1526))
    defer mbTrans1527.Close()
    _, err1528 := mbTrans1527.WriteString(arg1526)
    if err1528 != nil {
      Usage()
      return
    }
    factory1529 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1530 := factory1529.GetProtocol(mbTrans1527)
    argvalue2 := cassandra.NewCounterColumn()
    err1531 := argvalue2.Read(jsProt1530)
    if err1531 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.Add(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "remove":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "Remove requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1533 := flag.Arg(2)
    mbTrans1534 := thrift.NewTMemoryBufferLen(len(arg1533))
    defer mbTrans1534.Close()
    _, err1535 := mbTrans1534.WriteString(arg1533)
    if err1535 != nil {
      Usage()
      return
    }
    factory1536 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1537 := factory1536.GetProtocol(mbTrans1534)
    argvalue1 := cassandra.NewColumnPath()
    err1538 := argvalue1.Read(jsProt1537)
    if err1538 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err1539 := (strconv.Atoi64(flag.Arg(3)))
    if err1539 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := cassandra.ConsistencyLevel(tmp3)
    value3 := argvalue3
    fmt.Print(client.Remove(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "remove_counter":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "RemoveCounter requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1541 := flag.Arg(2)
    mbTrans1542 := thrift.NewTMemoryBufferLen(len(arg1541))
    defer mbTrans1542.Close()
    _, err1543 := mbTrans1542.WriteString(arg1541)
    if err1543 != nil {
      Usage()
      return
    }
    factory1544 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1545 := factory1544.GetProtocol(mbTrans1542)
    argvalue1 := cassandra.NewColumnPath()
    err1546 := argvalue1.Read(jsProt1545)
    if err1546 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := cassandra.ConsistencyLevel(tmp2)
    value2 := argvalue2
    fmt.Print(client.RemoveCounter(value0, value1, value2))
    fmt.Print("\n")
    break
  case "batch_mutate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "BatchMutate requires 2 args\n")
      flag.Usage()
    }
    arg1547 := flag.Arg(1)
    mbTrans1548 := thrift.NewTMemoryBufferLen(len(arg1547))
    defer mbTrans1548.Close()
    _, err1549 := mbTrans1548.WriteString(arg1547)
    if err1549 != nil { 
      Usage()
      return
    }
    factory1550 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1551 := factory1550.GetProtocol(mbTrans1548)
    containerStruct0 := cassandra.NewBatchMutateArgs()
    err1552 := containerStruct0.ReadField1(jsProt1551)
    if err1552 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.MutationMap
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := cassandra.ConsistencyLevel(tmp1)
    value1 := argvalue1
    fmt.Print(client.BatchMutate(value0, value1))
    fmt.Print("\n")
    break
  case "truncate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "Truncate requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.Truncate(value0))
    fmt.Print("\n")
    break
  case "describe_schema_versions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "DescribeSchemaVersions requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.DescribeSchemaVersions())
    fmt.Print("\n")
    break
  case "describe_keyspaces":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "DescribeKeyspaces requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.DescribeKeyspaces())
    fmt.Print("\n")
    break
  case "describe_cluster_name":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "DescribeClusterName requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.DescribeClusterName())
    fmt.Print("\n")
    break
  case "describe_version":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "DescribeVersion requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.DescribeVersion())
    fmt.Print("\n")
    break
  case "describe_ring":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DescribeRing requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DescribeRing(value0))
    fmt.Print("\n")
    break
  case "describe_partitioner":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "DescribePartitioner requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.DescribePartitioner())
    fmt.Print("\n")
    break
  case "describe_snitch":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "DescribeSnitch requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.DescribeSnitch())
    fmt.Print("\n")
    break
  case "describe_keyspace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DescribeKeyspace requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DescribeKeyspace(value0))
    fmt.Print("\n")
    break
  case "describe_splits":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "DescribeSplits requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err1559 := (strconv.Atoi(flag.Arg(4)))
    if err1559 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.DescribeSplits(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "system_add_column_family":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SystemAddColumnFamily requires 1 args\n")
      flag.Usage()
    }
    arg1560 := flag.Arg(1)
    mbTrans1561 := thrift.NewTMemoryBufferLen(len(arg1560))
    defer mbTrans1561.Close()
    _, err1562 := mbTrans1561.WriteString(arg1560)
    if err1562 != nil {
      Usage()
      return
    }
    factory1563 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1564 := factory1563.GetProtocol(mbTrans1561)
    argvalue0 := cassandra.NewCfDef()
    err1565 := argvalue0.Read(jsProt1564)
    if err1565 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SystemAddColumnFamily(value0))
    fmt.Print("\n")
    break
  case "system_drop_column_family":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SystemDropColumnFamily requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SystemDropColumnFamily(value0))
    fmt.Print("\n")
    break
  case "system_add_keyspace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SystemAddKeyspace requires 1 args\n")
      flag.Usage()
    }
    arg1567 := flag.Arg(1)
    mbTrans1568 := thrift.NewTMemoryBufferLen(len(arg1567))
    defer mbTrans1568.Close()
    _, err1569 := mbTrans1568.WriteString(arg1567)
    if err1569 != nil {
      Usage()
      return
    }
    factory1570 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1571 := factory1570.GetProtocol(mbTrans1568)
    argvalue0 := cassandra.NewKsDef()
    err1572 := argvalue0.Read(jsProt1571)
    if err1572 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SystemAddKeyspace(value0))
    fmt.Print("\n")
    break
  case "system_drop_keyspace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SystemDropKeyspace requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SystemDropKeyspace(value0))
    fmt.Print("\n")
    break
  case "system_update_keyspace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SystemUpdateKeyspace requires 1 args\n")
      flag.Usage()
    }
    arg1574 := flag.Arg(1)
    mbTrans1575 := thrift.NewTMemoryBufferLen(len(arg1574))
    defer mbTrans1575.Close()
    _, err1576 := mbTrans1575.WriteString(arg1574)
    if err1576 != nil {
      Usage()
      return
    }
    factory1577 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1578 := factory1577.GetProtocol(mbTrans1575)
    argvalue0 := cassandra.NewKsDef()
    err1579 := argvalue0.Read(jsProt1578)
    if err1579 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SystemUpdateKeyspace(value0))
    fmt.Print("\n")
    break
  case "system_update_column_family":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SystemUpdateColumnFamily requires 1 args\n")
      flag.Usage()
    }
    arg1580 := flag.Arg(1)
    mbTrans1581 := thrift.NewTMemoryBufferLen(len(arg1580))
    defer mbTrans1581.Close()
    _, err1582 := mbTrans1581.WriteString(arg1580)
    if err1582 != nil {
      Usage()
      return
    }
    factory1583 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1584 := factory1583.GetProtocol(mbTrans1581)
    argvalue0 := cassandra.NewCfDef()
    err1585 := argvalue0.Read(jsProt1584)
    if err1585 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SystemUpdateColumnFamily(value0))
    fmt.Print("\n")
    break
  case "execute_cql_query":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "ExecuteCqlQuery requires 2 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := cassandra.Compression(tmp1)
    value1 := argvalue1
    fmt.Print(client.ExecuteCqlQuery(value0, value1))
    fmt.Print("\n")
    break
  case "prepare_cql_query":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "PrepareCqlQuery requires 2 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := cassandra.Compression(tmp1)
    value1 := argvalue1
    fmt.Print(client.PrepareCqlQuery(value0, value1))
    fmt.Print("\n")
    break
  case "execute_prepared_cql_query":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "ExecutePreparedCqlQuery requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1588 := (strconv.Atoi(flag.Arg(1)))
    if err1588 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1589 := flag.Arg(2)
    mbTrans1590 := thrift.NewTMemoryBufferLen(len(arg1589))
    defer mbTrans1590.Close()
    _, err1591 := mbTrans1590.WriteString(arg1589)
    if err1591 != nil { 
      Usage()
      return
    }
    factory1592 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1593 := factory1592.GetProtocol(mbTrans1590)
    containerStruct1 := cassandra.NewExecutePreparedCqlQueryArgs()
    err1594 := containerStruct1.ReadField2(jsProt1593)
    if err1594 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Values
    value1 := argvalue1
    fmt.Print(client.ExecutePreparedCqlQuery(value0, value1))
    fmt.Print("\n")
    break
  case "set_cql_version":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SetCqlVersion requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SetCqlVersion(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
