/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package cassandra

import (
	"fmt"
	"github.com/pomack/thrift4go/lib/go/src/thrift"
	"math"
)

// This is a temporary safety measure to ensure that the `math'
// import does not trip up any generated output that may not
// happen to use the math import due to not having emited enums.
//
// Future clean-ups will deprecate the need for this.
func init() {
	var temporaryAndUnused int32 = math.MinInt32
	temporaryAndUnused++
}

/**
 *The ConsistencyLevel is an enum that controls both read and write
 *behavior based on the ReplicationFactor of the keyspace.  The
 *different consistency levels have different meanings, depending on
 *if you're doing a write or read operation.
 *
 *If W + R > ReplicationFactor, where W is the number of nodes to
 *block for on write, and R the number to block for on reads, you
 *will have strongly consistent behavior; that is, readers will
 *always see the most recent write. Of these, the most interesting is
 *to do QUORUM reads and writes, which gives you consistency while
 *still allowing availability in the face of node failures up to half
 *of <ReplicationFactor>. Of course if latency is more important than
 *consistency then you can use lower values for either or both.
 *
 *Some ConsistencyLevels (ONE, TWO, THREE) refer to a specific number
 *of replicas rather than a logical concept that adjusts
 *automatically with the replication factor.  Of these, only ONE is
 *commonly used; TWO and (even more rarely) THREE are only useful
 *when you care more about guaranteeing a certain level of
 *durability, than consistency.
 *
 *Write consistency levels make the following guarantees before reporting success to the client:
 *  ANY          Ensure that the write has been written once somewhere, including possibly being hinted in a non-target node.
 *  ONE          Ensure that the write has been written to at least 1 node's commit log and memory table
 *  TWO          Ensure that the write has been written to at least 2 node's commit log and memory table
 *  THREE        Ensure that the write has been written to at least 3 node's commit log and memory table
 *  QUORUM       Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes
 *  LOCAL_QUORUM Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes, within the local datacenter (requires NetworkTopologyStrategy)
 *  EACH_QUORUM  Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes in each datacenter (requires NetworkTopologyStrategy)
 *  ALL          Ensure that the write is written to <code>&lt;ReplicationFactor&gt;</code> nodes before responding to the client.
 *
 *Read consistency levels make the following guarantees before returning successful results to the client:
 *  ANY          Not supported. You probably want ONE instead.
 *  ONE          Returns the record obtained from a single replica.
 *  TWO          Returns the record with the most recent timestamp once two replicas have replied.
 *  THREE        Returns the record with the most recent timestamp once three replicas have replied.
 *  QUORUM       Returns the record with the most recent timestamp once a majority of replicas have replied.
 *  LOCAL_QUORUM Returns the record with the most recent timestamp once a majority of replicas within the local datacenter have replied.
 *  EACH_QUORUM  Returns the record with the most recent timestamp once a majority of replicas within each datacenter have replied.
 *  ALL          Returns the record with the most recent timestamp once all replicas have replied (implies no replica may be down)..
 */
type ConsistencyLevel int64

const (
	ConsistencyLevel_ONE          ConsistencyLevel = 1
	ConsistencyLevel_QUORUM       ConsistencyLevel = 2
	ConsistencyLevel_LOCAL_QUORUM ConsistencyLevel = 3
	ConsistencyLevel_EACH_QUORUM  ConsistencyLevel = 4
	ConsistencyLevel_ALL          ConsistencyLevel = 5
	ConsistencyLevel_ANY          ConsistencyLevel = 6
	ConsistencyLevel_TWO          ConsistencyLevel = 7
	ConsistencyLevel_THREE        ConsistencyLevel = 8
)

func (p ConsistencyLevel) String() string {
	switch p {
	case ConsistencyLevel_ONE:
		return "ConsistencyLevel_ONE"
	case ConsistencyLevel_QUORUM:
		return "ConsistencyLevel_QUORUM"
	case ConsistencyLevel_LOCAL_QUORUM:
		return "ConsistencyLevel_LOCAL_QUORUM"
	case ConsistencyLevel_EACH_QUORUM:
		return "ConsistencyLevel_EACH_QUORUM"
	case ConsistencyLevel_ALL:
		return "ConsistencyLevel_ALL"
	case ConsistencyLevel_ANY:
		return "ConsistencyLevel_ANY"
	case ConsistencyLevel_TWO:
		return "ConsistencyLevel_TWO"
	case ConsistencyLevel_THREE:
		return "ConsistencyLevel_THREE"
	}
	return "<UNSET>"
}

func FromConsistencyLevelString(s string) ConsistencyLevel {
	switch s {
	case "ConsistencyLevel_ONE":
		return ConsistencyLevel_ONE
	case "ConsistencyLevel_QUORUM":
		return ConsistencyLevel_QUORUM
	case "ConsistencyLevel_LOCAL_QUORUM":
		return ConsistencyLevel_LOCAL_QUORUM
	case "ConsistencyLevel_EACH_QUORUM":
		return ConsistencyLevel_EACH_QUORUM
	case "ConsistencyLevel_ALL":
		return ConsistencyLevel_ALL
	case "ConsistencyLevel_ANY":
		return ConsistencyLevel_ANY
	case "ConsistencyLevel_TWO":
		return ConsistencyLevel_TWO
	case "ConsistencyLevel_THREE":
		return ConsistencyLevel_THREE
	}
	return ConsistencyLevel(-10000)
}

func (p ConsistencyLevel) Value() int {
	return int(p)
}

func (p ConsistencyLevel) IsEnum() bool {
	return true
}

type IndexOperator int64

const (
	IndexOperator_EQ  IndexOperator = 0
	IndexOperator_GTE IndexOperator = 1
	IndexOperator_GT  IndexOperator = 2
	IndexOperator_LTE IndexOperator = 3
	IndexOperator_LT  IndexOperator = 4
)

func (p IndexOperator) String() string {
	switch p {
	case IndexOperator_EQ:
		return "IndexOperator_EQ"
	case IndexOperator_GTE:
		return "IndexOperator_GTE"
	case IndexOperator_GT:
		return "IndexOperator_GT"
	case IndexOperator_LTE:
		return "IndexOperator_LTE"
	case IndexOperator_LT:
		return "IndexOperator_LT"
	}
	return "<UNSET>"
}

func FromIndexOperatorString(s string) IndexOperator {
	switch s {
	case "IndexOperator_EQ":
		return IndexOperator_EQ
	case "IndexOperator_GTE":
		return IndexOperator_GTE
	case "IndexOperator_GT":
		return IndexOperator_GT
	case "IndexOperator_LTE":
		return IndexOperator_LTE
	case "IndexOperator_LT":
		return IndexOperator_LT
	}
	return IndexOperator(-10000)
}

func (p IndexOperator) Value() int {
	return int(p)
}

func (p IndexOperator) IsEnum() bool {
	return true
}

type IndexType int64

const (
	IndexType_KEYS       IndexType = 0
	IndexType_CUSTOM     IndexType = 1
	IndexType_COMPOSITES IndexType = 2
)

func (p IndexType) String() string {
	switch p {
	case IndexType_KEYS:
		return "IndexType_KEYS"
	case IndexType_CUSTOM:
		return "IndexType_CUSTOM"
	case IndexType_COMPOSITES:
		return "IndexType_COMPOSITES"
	}
	return "<UNSET>"
}

func FromIndexTypeString(s string) IndexType {
	switch s {
	case "IndexType_KEYS":
		return IndexType_KEYS
	case "IndexType_CUSTOM":
		return IndexType_CUSTOM
	case "IndexType_COMPOSITES":
		return IndexType_COMPOSITES
	}
	return IndexType(-10000)
}

func (p IndexType) Value() int {
	return int(p)
}

func (p IndexType) IsEnum() bool {
	return true
}

/**
 *CQL query compression
 */
type Compression int64

const (
	Compression_GZIP Compression = 1
	Compression_NONE Compression = 2
)

func (p Compression) String() string {
	switch p {
	case Compression_GZIP:
		return "Compression_GZIP"
	case Compression_NONE:
		return "Compression_NONE"
	}
	return "<UNSET>"
}

func FromCompressionString(s string) Compression {
	switch s {
	case "Compression_GZIP":
		return Compression_GZIP
	case "Compression_NONE":
		return Compression_NONE
	case "NONE":
		return Compression_NONE
	case "GZIP":
		return Compression_GZIP
	}
	return Compression(-10000)
}

func (p Compression) Value() int {
	return int(p)
}

func (p Compression) IsEnum() bool {
	return true
}

type CqlResultType int64

const (
	CqlResultType_ROWS CqlResultType = 1
	CqlResultType_VOID CqlResultType = 2
	CqlResultType_INT  CqlResultType = 3
)

func (p CqlResultType) String() string {
	switch p {
	case CqlResultType_ROWS:
		return "CqlResultType_ROWS"
	case CqlResultType_VOID:
		return "CqlResultType_VOID"
	case CqlResultType_INT:
		return "CqlResultType_INT"
	}
	return "<UNSET>"
}

func FromCqlResultTypeString(s string) CqlResultType {
	switch s {
	case "CqlResultType_ROWS":
		return CqlResultType_ROWS
	case "CqlResultType_VOID":
		return CqlResultType_VOID
	case "CqlResultType_INT":
		return CqlResultType_INT
	}
	return CqlResultType(-10000)
}

func (p CqlResultType) Value() int {
	return int(p)
}

func (p CqlResultType) IsEnum() bool {
	return true
}

/**
 * Basic unit of data within a ColumnFamily.
 * @param name, the name by which this column is set and retrieved.  Maximum 64KB long.
 * @param value. The data associated with the name.  Maximum 2GB long, but in practice you should limit it to small numbers of MB (since Thrift must read the full value into memory to operate on it).
 * @param timestamp. The timestamp is used for conflict detection/resolution when two columns with same name need to be compared.
 * @param ttl. An optional, positive delay (in seconds) after which the column will be automatically deleted.
 * 
 * Attributes:
 *  - Name
 *  - Value
 *  - Timestamp
 *  - Ttl
 */
type Column struct {
	thrift.TStruct
	Name      []byte "name"      // 1
	Value     []byte "value"     // 2
	Timestamp int64  "timestamp" // 3
	Ttl       int32  "ttl"       // 4
}

func NewColumn() *Column {
	output := &Column{
		TStruct: thrift.NewTStruct("Column", []thrift.TField{
			thrift.NewTField("name", thrift.BINARY, 1),
			thrift.NewTField("value", thrift.BINARY, 2),
			thrift.NewTField("timestamp", thrift.I64, 3),
			thrift.NewTField("ttl", thrift.I32, 4),
		}),
	}
	{
	}
	return output
}

func (p *Column) IsSetValue() bool {
	return p.Value != nil
}

func (p *Column) IsSetTimestamp() bool {
	return p.Timestamp != 0
}

func (p *Column) IsSetTtl() bool {
	return p.Ttl != 0
}

func (p *Column) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "name" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "value" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "timestamp" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "ttl" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Column) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v0, err1 := iprot.ReadBinary()
	if err1 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err1)
	}
	p.Name = v0
	return err
}

func (p *Column) ReadFieldName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *Column) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v2, err3 := iprot.ReadBinary()
	if err3 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "value", p.ThriftName(), err3)
	}
	p.Value = v2
	return err
}

func (p *Column) ReadFieldValue(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *Column) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v4, err5 := iprot.ReadI64()
	if err5 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err5)
	}
	p.Timestamp = v4
	return err
}

func (p *Column) ReadFieldTimestamp(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *Column) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v6, err7 := iprot.ReadI32()
	if err7 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "ttl", p.ThriftName(), err7)
	}
	p.Ttl = v6
	return err
}

func (p *Column) ReadFieldTtl(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *Column) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Column")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Column) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Name != nil {
		err = oprot.WriteFieldBegin("name", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Name)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Column) WriteFieldName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *Column) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Value != nil {
		if p.IsSetValue() {
			err = oprot.WriteFieldBegin("value", thrift.BINARY, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.Value)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *Column) WriteFieldValue(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *Column) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetTimestamp() {
		err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
		}
		err = oprot.WriteI64(int64(p.Timestamp))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Column) WriteFieldTimestamp(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *Column) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetTtl() {
		err = oprot.WriteFieldBegin("ttl", thrift.I32, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "ttl", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Ttl))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "ttl", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "ttl", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Column) WriteFieldTtl(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *Column) TStructName() string {
	return "Column"
}

func (p *Column) ThriftName() string {
	return "Column"
}

func (p *Column) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Column(%+v)", *p)
}

func (p *Column) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*Column)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *Column) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Name
	case 2:
		return p.Value
	case 3:
		return p.Timestamp
	case 4:
		return p.Ttl
	}
	return nil
}

func (p *Column) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("name", thrift.BINARY, 1),
		thrift.NewTField("value", thrift.BINARY, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("ttl", thrift.I32, 4),
	})
}

/**
 * A named list of columns.
 * @param name. see Column.name.
 * @param columns. A collection of standard Columns.  The columns within a super column are defined in an adhoc manner.
 *                 Columns within a super column do not have to have matching structures (similarly named child columns).
 * 
 * Attributes:
 *  - Name
 *  - Columns
 */
type SuperColumn struct {
	thrift.TStruct
	Name    []byte       "name"    // 1
	Columns thrift.TList "columns" // 2
}

func NewSuperColumn() *SuperColumn {
	output := &SuperColumn{
		TStruct: thrift.NewTStruct("SuperColumn", []thrift.TField{
			thrift.NewTField("name", thrift.BINARY, 1),
			thrift.NewTField("columns", thrift.LIST, 2),
		}),
	}
	{
	}
	return output
}

func (p *SuperColumn) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "name" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "columns" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SuperColumn) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v8, err9 := iprot.ReadBinary()
	if err9 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err9)
	}
	p.Name = v8
	return err
}

func (p *SuperColumn) ReadFieldName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SuperColumn) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype15, _size12, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	p.Columns = thrift.NewTList(_etype15, _size12)
	for _i16 := 0; _i16 < _size12; _i16++ {
		_elem17 := NewColumn()
		err20 := _elem17.Read(iprot)
		if err20 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem17Column", err20)
		}
		p.Columns.Push(_elem17)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *SuperColumn) ReadFieldColumns(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *SuperColumn) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("SuperColumn")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SuperColumn) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Name != nil {
		err = oprot.WriteFieldBegin("name", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Name)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SuperColumn) WriteFieldName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SuperColumn) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Columns.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter21 := range p.Columns.Iter() {
			Iter22 := Iter21.(*Column)
			err = Iter22.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Column", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SuperColumn) WriteFieldColumns(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *SuperColumn) TStructName() string {
	return "SuperColumn"
}

func (p *SuperColumn) ThriftName() string {
	return "SuperColumn"
}

func (p *SuperColumn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SuperColumn(%+v)", *p)
}

func (p *SuperColumn) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SuperColumn)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *SuperColumn) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Name
	case 2:
		return p.Columns
	}
	return nil
}

func (p *SuperColumn) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("name", thrift.BINARY, 1),
		thrift.NewTField("columns", thrift.LIST, 2),
	})
}

/**
 * Attributes:
 *  - Name
 *  - Value
 */
type CounterColumn struct {
	thrift.TStruct
	Name  []byte "name"  // 1
	Value int64  "value" // 2
}

func NewCounterColumn() *CounterColumn {
	output := &CounterColumn{
		TStruct: thrift.NewTStruct("CounterColumn", []thrift.TField{
			thrift.NewTField("name", thrift.BINARY, 1),
			thrift.NewTField("value", thrift.I64, 2),
		}),
	}
	{
	}
	return output
}

func (p *CounterColumn) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "name" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "value" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CounterColumn) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v23, err24 := iprot.ReadBinary()
	if err24 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err24)
	}
	p.Name = v23
	return err
}

func (p *CounterColumn) ReadFieldName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *CounterColumn) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v25, err26 := iprot.ReadI64()
	if err26 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "value", p.ThriftName(), err26)
	}
	p.Value = v25
	return err
}

func (p *CounterColumn) ReadFieldValue(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *CounterColumn) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CounterColumn")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CounterColumn) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Name != nil {
		err = oprot.WriteFieldBegin("name", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Name)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CounterColumn) WriteFieldName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *CounterColumn) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("value", thrift.I64, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Value))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err)
	}
	return err
}

func (p *CounterColumn) WriteFieldValue(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *CounterColumn) TStructName() string {
	return "CounterColumn"
}

func (p *CounterColumn) ThriftName() string {
	return "CounterColumn"
}

func (p *CounterColumn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CounterColumn(%+v)", *p)
}

func (p *CounterColumn) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*CounterColumn)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *CounterColumn) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Name
	case 2:
		return p.Value
	}
	return nil
}

func (p *CounterColumn) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("name", thrift.BINARY, 1),
		thrift.NewTField("value", thrift.I64, 2),
	})
}

/**
 * Attributes:
 *  - Name
 *  - Columns
 */
type CounterSuperColumn struct {
	thrift.TStruct
	Name    []byte       "name"    // 1
	Columns thrift.TList "columns" // 2
}

func NewCounterSuperColumn() *CounterSuperColumn {
	output := &CounterSuperColumn{
		TStruct: thrift.NewTStruct("CounterSuperColumn", []thrift.TField{
			thrift.NewTField("name", thrift.BINARY, 1),
			thrift.NewTField("columns", thrift.LIST, 2),
		}),
	}
	{
	}
	return output
}

func (p *CounterSuperColumn) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "name" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "columns" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CounterSuperColumn) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v27, err28 := iprot.ReadBinary()
	if err28 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err28)
	}
	p.Name = v27
	return err
}

func (p *CounterSuperColumn) ReadFieldName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *CounterSuperColumn) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype34, _size31, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	p.Columns = thrift.NewTList(_etype34, _size31)
	for _i35 := 0; _i35 < _size31; _i35++ {
		_elem36 := NewCounterColumn()
		err39 := _elem36.Read(iprot)
		if err39 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem36CounterColumn", err39)
		}
		p.Columns.Push(_elem36)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CounterSuperColumn) ReadFieldColumns(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *CounterSuperColumn) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CounterSuperColumn")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CounterSuperColumn) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Name != nil {
		err = oprot.WriteFieldBegin("name", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Name)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CounterSuperColumn) WriteFieldName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *CounterSuperColumn) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Columns.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter40 := range p.Columns.Iter() {
			Iter41 := Iter40.(*CounterColumn)
			err = Iter41.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("CounterColumn", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CounterSuperColumn) WriteFieldColumns(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *CounterSuperColumn) TStructName() string {
	return "CounterSuperColumn"
}

func (p *CounterSuperColumn) ThriftName() string {
	return "CounterSuperColumn"
}

func (p *CounterSuperColumn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CounterSuperColumn(%+v)", *p)
}

func (p *CounterSuperColumn) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*CounterSuperColumn)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *CounterSuperColumn) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Name
	case 2:
		return p.Columns
	}
	return nil
}

func (p *CounterSuperColumn) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("name", thrift.BINARY, 1),
		thrift.NewTField("columns", thrift.LIST, 2),
	})
}

/**
 * Methods for fetching rows/records from Cassandra will return either a single instance of ColumnOrSuperColumn or a list
 * of ColumnOrSuperColumns (get_slice()). If you're looking up a SuperColumn (or list of SuperColumns) then the resulting
 * instances of ColumnOrSuperColumn will have the requested SuperColumn in the attribute super_column. For queries resulting
 * in Columns, those values will be in the attribute column. This change was made between 0.3 and 0.4 to standardize on
 * single query methods that may return either a SuperColumn or Column.
 * 
 * If the query was on a counter column family, you will either get a counter_column (instead of a column) or a
 * counter_super_column (instead of a super_column)
 * 
 * @param column. The Column returned by get() or get_slice().
 * @param super_column. The SuperColumn returned by get() or get_slice().
 * @param counter_column. The Counterolumn returned by get() or get_slice().
 * @param counter_super_column. The CounterSuperColumn returned by get() or get_slice().
 * 
 * Attributes:
 *  - Column
 *  - SuperColumn
 *  - CounterColumn
 *  - CounterSuperColumn
 */
type ColumnOrSuperColumn struct {
	thrift.TStruct
	Column             *Column             "column"               // 1
	SuperColumn        *SuperColumn        "super_column"         // 2
	CounterColumn      *CounterColumn      "counter_column"       // 3
	CounterSuperColumn *CounterSuperColumn "counter_super_column" // 4
}

func NewColumnOrSuperColumn() *ColumnOrSuperColumn {
	output := &ColumnOrSuperColumn{
		TStruct: thrift.NewTStruct("ColumnOrSuperColumn", []thrift.TField{
			thrift.NewTField("column", thrift.STRUCT, 1),
			thrift.NewTField("super_column", thrift.STRUCT, 2),
			thrift.NewTField("counter_column", thrift.STRUCT, 3),
			thrift.NewTField("counter_super_column", thrift.STRUCT, 4),
		}),
	}
	{
	}
	return output
}

func (p *ColumnOrSuperColumn) IsSetColumn() bool {
	return p.Column != nil
}

func (p *ColumnOrSuperColumn) IsSetSuperColumn() bool {
	return p.SuperColumn != nil
}

func (p *ColumnOrSuperColumn) IsSetCounterColumn() bool {
	return p.CounterColumn != nil
}

func (p *ColumnOrSuperColumn) IsSetCounterSuperColumn() bool {
	return p.CounterSuperColumn != nil
}

func (p *ColumnOrSuperColumn) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "column" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "super_column" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "counter_column" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "counter_super_column" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnOrSuperColumn) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Column = NewColumn()
	err44 := p.Column.Read(iprot)
	if err44 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnColumn", err44)
	}
	return err
}

func (p *ColumnOrSuperColumn) ReadFieldColumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ColumnOrSuperColumn) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.SuperColumn = NewSuperColumn()
	err47 := p.SuperColumn.Read(iprot)
	if err47 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SuperColumnSuperColumn", err47)
	}
	return err
}

func (p *ColumnOrSuperColumn) ReadFieldSuperColumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *ColumnOrSuperColumn) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.CounterColumn = NewCounterColumn()
	err50 := p.CounterColumn.Read(iprot)
	if err50 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.CounterColumnCounterColumn", err50)
	}
	return err
}

func (p *ColumnOrSuperColumn) ReadFieldCounterColumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *ColumnOrSuperColumn) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.CounterSuperColumn = NewCounterSuperColumn()
	err53 := p.CounterSuperColumn.Read(iprot)
	if err53 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.CounterSuperColumnCounterSuperColumn", err53)
	}
	return err
}

func (p *ColumnOrSuperColumn) ReadFieldCounterSuperColumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *ColumnOrSuperColumn) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("ColumnOrSuperColumn")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnOrSuperColumn) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		if p.IsSetColumn() {
			err = oprot.WriteFieldBegin("column", thrift.STRUCT, 1)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "column", p.ThriftName(), err)
			}
			err = p.Column.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Column", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "column", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *ColumnOrSuperColumn) WriteFieldColumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ColumnOrSuperColumn) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.SuperColumn != nil {
		if p.IsSetSuperColumn() {
			err = oprot.WriteFieldBegin("super_column", thrift.STRUCT, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "super_column", p.ThriftName(), err)
			}
			err = p.SuperColumn.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("SuperColumn", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "super_column", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *ColumnOrSuperColumn) WriteFieldSuperColumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *ColumnOrSuperColumn) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.CounterColumn != nil {
		if p.IsSetCounterColumn() {
			err = oprot.WriteFieldBegin("counter_column", thrift.STRUCT, 3)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(3, "counter_column", p.ThriftName(), err)
			}
			err = p.CounterColumn.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("CounterColumn", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(3, "counter_column", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *ColumnOrSuperColumn) WriteFieldCounterColumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *ColumnOrSuperColumn) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.CounterSuperColumn != nil {
		if p.IsSetCounterSuperColumn() {
			err = oprot.WriteFieldBegin("counter_super_column", thrift.STRUCT, 4)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "counter_super_column", p.ThriftName(), err)
			}
			err = p.CounterSuperColumn.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("CounterSuperColumn", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "counter_super_column", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *ColumnOrSuperColumn) WriteFieldCounterSuperColumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *ColumnOrSuperColumn) TStructName() string {
	return "ColumnOrSuperColumn"
}

func (p *ColumnOrSuperColumn) ThriftName() string {
	return "ColumnOrSuperColumn"
}

func (p *ColumnOrSuperColumn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnOrSuperColumn(%+v)", *p)
}

func (p *ColumnOrSuperColumn) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ColumnOrSuperColumn)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ColumnOrSuperColumn) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Column
	case 2:
		return p.SuperColumn
	case 3:
		return p.CounterColumn
	case 4:
		return p.CounterSuperColumn
	}
	return nil
}

func (p *ColumnOrSuperColumn) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column", thrift.STRUCT, 1),
		thrift.NewTField("super_column", thrift.STRUCT, 2),
		thrift.NewTField("counter_column", thrift.STRUCT, 3),
		thrift.NewTField("counter_super_column", thrift.STRUCT, 4),
	})
}

/**
 * A specific column was requested that does not exist.
 */
type NotFoundException struct {
	thrift.TStruct
}

func NewNotFoundException() *NotFoundException {
	output := &NotFoundException{
		TStruct: thrift.NewTStruct("NotFoundException", []thrift.TField{}),
	}
	{
	}
	return output
}

func (p *NotFoundException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		err = iprot.Skip(fieldTypeId)
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *NotFoundException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("NotFoundException")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *NotFoundException) TStructName() string {
	return "NotFoundException"
}

func (p *NotFoundException) ThriftName() string {
	return "NotFoundException"
}

func (p *NotFoundException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotFoundException(%+v)", *p)
}

func (p *NotFoundException) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*NotFoundException)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *NotFoundException) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *NotFoundException) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Invalid request could mean keyspace or column family does not exist, required parameters are missing, or a parameter is malformed.
 * why contains an associated error message.
 * 
 * Attributes:
 *  - Why
 */
type InvalidRequestException struct {
	thrift.TStruct
	Why string "why" // 1
}

func NewInvalidRequestException() *InvalidRequestException {
	output := &InvalidRequestException{
		TStruct: thrift.NewTStruct("InvalidRequestException", []thrift.TField{
			thrift.NewTField("why", thrift.STRING, 1),
		}),
	}
	{
	}
	return output
}

func (p *InvalidRequestException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "why" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *InvalidRequestException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v54, err55 := iprot.ReadString()
	if err55 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "why", p.ThriftName(), err55)
	}
	p.Why = v54
	return err
}

func (p *InvalidRequestException) ReadFieldWhy(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *InvalidRequestException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("InvalidRequestException")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *InvalidRequestException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("why", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Why))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	return err
}

func (p *InvalidRequestException) WriteFieldWhy(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *InvalidRequestException) TStructName() string {
	return "InvalidRequestException"
}

func (p *InvalidRequestException) ThriftName() string {
	return "InvalidRequestException"
}

func (p *InvalidRequestException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidRequestException(%+v)", *p)
}

func (p *InvalidRequestException) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*InvalidRequestException)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *InvalidRequestException) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Why
	}
	return nil
}

func (p *InvalidRequestException) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("why", thrift.STRING, 1),
	})
}

/**
 * Not all the replicas required could be created and/or read.
 */
type UnavailableException struct {
	thrift.TStruct
}

func NewUnavailableException() *UnavailableException {
	output := &UnavailableException{
		TStruct: thrift.NewTStruct("UnavailableException", []thrift.TField{}),
	}
	{
	}
	return output
}

func (p *UnavailableException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		err = iprot.Skip(fieldTypeId)
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *UnavailableException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("UnavailableException")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *UnavailableException) TStructName() string {
	return "UnavailableException"
}

func (p *UnavailableException) ThriftName() string {
	return "UnavailableException"
}

func (p *UnavailableException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnavailableException(%+v)", *p)
}

func (p *UnavailableException) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*UnavailableException)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *UnavailableException) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *UnavailableException) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * RPC timeout was exceeded.  either a node failed mid-operation, or load was too high, or the requested op was too large.
 * 
 * Attributes:
 *  - AcknowledgedBy: if a write operation was acknowledged by some replicas but not by enough to
 * satisfy the required ConsistencyLevel, the number of successful
 * replies will be given here. In case of atomic_batch_mutate method this field
 * will be set to -1 if the batch was written to the batchlog and to 0 if it wasn't.
 *  - AcknowledgedByBatchlog: in case of atomic_batch_mutate method this field tells if the batch was written to the batchlog.
 */
type TimedOutException struct {
	thrift.TStruct
	AcknowledgedBy         int32 "acknowledged_by"          // 1
	AcknowledgedByBatchlog bool  "acknowledged_by_batchlog" // 2
}

func NewTimedOutException() *TimedOutException {
	output := &TimedOutException{
		TStruct: thrift.NewTStruct("TimedOutException", []thrift.TField{
			thrift.NewTField("acknowledged_by", thrift.I32, 1),
			thrift.NewTField("acknowledged_by_batchlog", thrift.BOOL, 2),
		}),
	}
	{
	}
	return output
}

func (p *TimedOutException) IsSetAcknowledgedBy() bool {
	return p.AcknowledgedBy != 0
}

func (p *TimedOutException) IsSetAcknowledgedByBatchlog() bool {
	return p.AcknowledgedByBatchlog != false
}

func (p *TimedOutException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "acknowledged_by" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "acknowledged_by_batchlog" {
			if fieldTypeId == thrift.BOOL {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TimedOutException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v56, err57 := iprot.ReadI32()
	if err57 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "acknowledged_by", p.ThriftName(), err57)
	}
	p.AcknowledgedBy = v56
	return err
}

func (p *TimedOutException) ReadFieldAcknowledgedBy(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *TimedOutException) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v58, err59 := iprot.ReadBool()
	if err59 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "acknowledged_by_batchlog", p.ThriftName(), err59)
	}
	p.AcknowledgedByBatchlog = v58
	return err
}

func (p *TimedOutException) ReadFieldAcknowledgedByBatchlog(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *TimedOutException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TimedOutException")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TimedOutException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetAcknowledgedBy() {
		err = oprot.WriteFieldBegin("acknowledged_by", thrift.I32, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "acknowledged_by", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.AcknowledgedBy))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "acknowledged_by", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "acknowledged_by", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TimedOutException) WriteFieldAcknowledgedBy(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *TimedOutException) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetAcknowledgedByBatchlog() {
		err = oprot.WriteFieldBegin("acknowledged_by_batchlog", thrift.BOOL, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "acknowledged_by_batchlog", p.ThriftName(), err)
		}
		err = oprot.WriteBool(bool(p.AcknowledgedByBatchlog))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "acknowledged_by_batchlog", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "acknowledged_by_batchlog", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TimedOutException) WriteFieldAcknowledgedByBatchlog(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *TimedOutException) TStructName() string {
	return "TimedOutException"
}

func (p *TimedOutException) ThriftName() string {
	return "TimedOutException"
}

func (p *TimedOutException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimedOutException(%+v)", *p)
}

func (p *TimedOutException) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*TimedOutException)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *TimedOutException) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.AcknowledgedBy
	case 2:
		return p.AcknowledgedByBatchlog
	}
	return nil
}

func (p *TimedOutException) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("acknowledged_by", thrift.I32, 1),
		thrift.NewTField("acknowledged_by_batchlog", thrift.BOOL, 2),
	})
}

/**
 * invalid authentication request (invalid keyspace, user does not exist, or credentials invalid)
 * 
 * Attributes:
 *  - Why
 */
type AuthenticationException struct {
	thrift.TStruct
	Why string "why" // 1
}

func NewAuthenticationException() *AuthenticationException {
	output := &AuthenticationException{
		TStruct: thrift.NewTStruct("AuthenticationException", []thrift.TField{
			thrift.NewTField("why", thrift.STRING, 1),
		}),
	}
	{
	}
	return output
}

func (p *AuthenticationException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "why" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AuthenticationException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v60, err61 := iprot.ReadString()
	if err61 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "why", p.ThriftName(), err61)
	}
	p.Why = v60
	return err
}

func (p *AuthenticationException) ReadFieldWhy(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *AuthenticationException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("AuthenticationException")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AuthenticationException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("why", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Why))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	return err
}

func (p *AuthenticationException) WriteFieldWhy(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *AuthenticationException) TStructName() string {
	return "AuthenticationException"
}

func (p *AuthenticationException) ThriftName() string {
	return "AuthenticationException"
}

func (p *AuthenticationException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthenticationException(%+v)", *p)
}

func (p *AuthenticationException) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*AuthenticationException)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *AuthenticationException) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Why
	}
	return nil
}

func (p *AuthenticationException) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("why", thrift.STRING, 1),
	})
}

/**
 * invalid authorization request (user does not have access to keyspace)
 * 
 * Attributes:
 *  - Why
 */
type AuthorizationException struct {
	thrift.TStruct
	Why string "why" // 1
}

func NewAuthorizationException() *AuthorizationException {
	output := &AuthorizationException{
		TStruct: thrift.NewTStruct("AuthorizationException", []thrift.TField{
			thrift.NewTField("why", thrift.STRING, 1),
		}),
	}
	{
	}
	return output
}

func (p *AuthorizationException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "why" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AuthorizationException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v62, err63 := iprot.ReadString()
	if err63 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "why", p.ThriftName(), err63)
	}
	p.Why = v62
	return err
}

func (p *AuthorizationException) ReadFieldWhy(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *AuthorizationException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("AuthorizationException")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AuthorizationException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("why", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Why))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "why", p.ThriftName(), err)
	}
	return err
}

func (p *AuthorizationException) WriteFieldWhy(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *AuthorizationException) TStructName() string {
	return "AuthorizationException"
}

func (p *AuthorizationException) ThriftName() string {
	return "AuthorizationException"
}

func (p *AuthorizationException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthorizationException(%+v)", *p)
}

func (p *AuthorizationException) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*AuthorizationException)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *AuthorizationException) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Why
	}
	return nil
}

func (p *AuthorizationException) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("why", thrift.STRING, 1),
	})
}

/**
 * NOTE: This up outdated exception left for backward compatibility reasons,
 * no actual schema agreement validation is done starting from Cassandra 1.2
 * 
 * schemas are not in agreement across all nodes
 */
type SchemaDisagreementException struct {
	thrift.TStruct
}

func NewSchemaDisagreementException() *SchemaDisagreementException {
	output := &SchemaDisagreementException{
		TStruct: thrift.NewTStruct("SchemaDisagreementException", []thrift.TField{}),
	}
	{
	}
	return output
}

func (p *SchemaDisagreementException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		err = iprot.Skip(fieldTypeId)
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SchemaDisagreementException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("SchemaDisagreementException")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SchemaDisagreementException) TStructName() string {
	return "SchemaDisagreementException"
}

func (p *SchemaDisagreementException) ThriftName() string {
	return "SchemaDisagreementException"
}

func (p *SchemaDisagreementException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SchemaDisagreementException(%+v)", *p)
}

func (p *SchemaDisagreementException) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SchemaDisagreementException)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *SchemaDisagreementException) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *SchemaDisagreementException) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * ColumnParent is used when selecting groups of columns from the same ColumnFamily. In directory structure terms, imagine
 * ColumnParent as ColumnPath + '/../'.
 * 
 * See also <a href="cassandra.html#Struct_ColumnPath">ColumnPath</a>
 * 
 * Attributes:
 *  - ColumnFamily
 *  - SuperColumn
 */
type ColumnParent struct {
	thrift.TStruct
	_            interface{} // nil # 1
	_            interface{} // nil # 2
	ColumnFamily string      "column_family" // 3
	SuperColumn  []byte      "super_column"  // 4
}

func NewColumnParent() *ColumnParent {
	output := &ColumnParent{
		TStruct: thrift.NewTStruct("ColumnParent", []thrift.TField{
			thrift.NewTField("column_family", thrift.STRING, 3),
			thrift.NewTField("super_column", thrift.BINARY, 4),
		}),
	}
	{
	}
	return output
}

func (p *ColumnParent) IsSetSuperColumn() bool {
	return p.SuperColumn != nil
}

func (p *ColumnParent) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 3 || fieldName == "column_family" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "super_column" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnParent) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v64, err65 := iprot.ReadString()
	if err65 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column_family", p.ThriftName(), err65)
	}
	p.ColumnFamily = v64
	return err
}

func (p *ColumnParent) ReadFieldColumnFamily(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *ColumnParent) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v66, err67 := iprot.ReadBinary()
	if err67 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "super_column", p.ThriftName(), err67)
	}
	p.SuperColumn = v66
	return err
}

func (p *ColumnParent) ReadFieldSuperColumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *ColumnParent) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("ColumnParent")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnParent) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("column_family", thrift.STRING, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "column_family", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.ColumnFamily))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "column_family", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "column_family", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnParent) WriteFieldColumnFamily(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *ColumnParent) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.SuperColumn != nil {
		if p.IsSetSuperColumn() {
			err = oprot.WriteFieldBegin("super_column", thrift.BINARY, 4)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "super_column", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.SuperColumn)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "super_column", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "super_column", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *ColumnParent) WriteFieldSuperColumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *ColumnParent) TStructName() string {
	return "ColumnParent"
}

func (p *ColumnParent) ThriftName() string {
	return "ColumnParent"
}

func (p *ColumnParent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnParent(%+v)", *p)
}

func (p *ColumnParent) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ColumnParent)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ColumnParent) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 3:
		return p.ColumnFamily
	case 4:
		return p.SuperColumn
	}
	return nil
}

func (p *ColumnParent) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column_family", thrift.STRING, 3),
		thrift.NewTField("super_column", thrift.BINARY, 4),
	})
}

/**
 * The ColumnPath is the path to a single column in Cassandra. It might make sense to think of ColumnPath and
 * ColumnParent in terms of a directory structure.
 * 
 * ColumnPath is used to looking up a single column.
 * 
 * @param column_family. The name of the CF of the column being looked up.
 * @param super_column. The super column name.
 * @param column. The column name.
 * 
 * Attributes:
 *  - ColumnFamily
 *  - SuperColumn
 *  - Column
 */
type ColumnPath struct {
	thrift.TStruct
	_            interface{} // nil # 1
	_            interface{} // nil # 2
	ColumnFamily string      "column_family" // 3
	SuperColumn  []byte      "super_column"  // 4
	Column       []byte      "column"        // 5
}

func NewColumnPath() *ColumnPath {
	output := &ColumnPath{
		TStruct: thrift.NewTStruct("ColumnPath", []thrift.TField{
			thrift.NewTField("column_family", thrift.STRING, 3),
			thrift.NewTField("super_column", thrift.BINARY, 4),
			thrift.NewTField("column", thrift.BINARY, 5),
		}),
	}
	{
	}
	return output
}

func (p *ColumnPath) IsSetSuperColumn() bool {
	return p.SuperColumn != nil
}

func (p *ColumnPath) IsSetColumn() bool {
	return p.Column != nil
}

func (p *ColumnPath) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 3 || fieldName == "column_family" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "super_column" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "column" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnPath) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v68, err69 := iprot.ReadString()
	if err69 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column_family", p.ThriftName(), err69)
	}
	p.ColumnFamily = v68
	return err
}

func (p *ColumnPath) ReadFieldColumnFamily(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *ColumnPath) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v70, err71 := iprot.ReadBinary()
	if err71 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "super_column", p.ThriftName(), err71)
	}
	p.SuperColumn = v70
	return err
}

func (p *ColumnPath) ReadFieldSuperColumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *ColumnPath) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v72, err73 := iprot.ReadBinary()
	if err73 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "column", p.ThriftName(), err73)
	}
	p.Column = v72
	return err
}

func (p *ColumnPath) ReadFieldColumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *ColumnPath) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("ColumnPath")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnPath) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("column_family", thrift.STRING, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "column_family", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.ColumnFamily))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "column_family", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "column_family", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnPath) WriteFieldColumnFamily(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *ColumnPath) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.SuperColumn != nil {
		if p.IsSetSuperColumn() {
			err = oprot.WriteFieldBegin("super_column", thrift.BINARY, 4)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "super_column", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.SuperColumn)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "super_column", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "super_column", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *ColumnPath) WriteFieldSuperColumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *ColumnPath) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		if p.IsSetColumn() {
			err = oprot.WriteFieldBegin("column", thrift.BINARY, 5)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(5, "column", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.Column)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(5, "column", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(5, "column", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *ColumnPath) WriteFieldColumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *ColumnPath) TStructName() string {
	return "ColumnPath"
}

func (p *ColumnPath) ThriftName() string {
	return "ColumnPath"
}

func (p *ColumnPath) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnPath(%+v)", *p)
}

func (p *ColumnPath) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ColumnPath)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ColumnPath) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 3:
		return p.ColumnFamily
	case 4:
		return p.SuperColumn
	case 5:
		return p.Column
	}
	return nil
}

func (p *ColumnPath) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column_family", thrift.STRING, 3),
		thrift.NewTField("super_column", thrift.BINARY, 4),
		thrift.NewTField("column", thrift.BINARY, 5),
	})
}

/**
 * A slice range is a structure that stores basic range, ordering and limit information for a query that will return
 * multiple columns. It could be thought of as Cassandra's version of LIMIT and ORDER BY
 * 
 * @param start. The column name to start the slice with. This attribute is not required, though there is no default value,
 *               and can be safely set to '', i.e., an empty byte array, to start with the first column name. Otherwise, it
 *               must a valid value under the rules of the Comparator defined for the given ColumnFamily.
 * @param finish. The column name to stop the slice at. This attribute is not required, though there is no default value,
 *                and can be safely set to an empty byte array to not stop until 'count' results are seen. Otherwise, it
 *                must also be a valid value to the ColumnFamily Comparator.
 * @param reversed. Whether the results should be ordered in reversed order. Similar to ORDER BY blah DESC in SQL.
 * @param count. How many columns to return. Similar to LIMIT in SQL. May be arbitrarily large, but Thrift will
 *               materialize the whole result into memory before returning it to the client, so be aware that you may
 *               be better served by iterating through slices by passing the last value of one call in as the 'start'
 *               of the next instead of increasing 'count' arbitrarily large.
 * 
 * Attributes:
 *  - Start
 *  - Finish
 *  - Reversed
 *  - Count
 */
type SliceRange struct {
	thrift.TStruct
	Start    []byte "start"    // 1
	Finish   []byte "finish"   // 2
	Reversed bool   "reversed" // 3
	Count    int32  "count"    // 4
}

func NewSliceRange() *SliceRange {
	output := &SliceRange{
		TStruct: thrift.NewTStruct("SliceRange", []thrift.TField{
			thrift.NewTField("start", thrift.BINARY, 1),
			thrift.NewTField("finish", thrift.BINARY, 2),
			thrift.NewTField("reversed", thrift.BOOL, 3),
			thrift.NewTField("count", thrift.I32, 4),
		}),
	}
	{
		output.Reversed = false
		output.Count = 100
	}
	return output
}

func (p *SliceRange) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "start" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "finish" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "reversed" {
			if fieldTypeId == thrift.BOOL {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "count" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SliceRange) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v74, err75 := iprot.ReadBinary()
	if err75 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "start", p.ThriftName(), err75)
	}
	p.Start = v74
	return err
}

func (p *SliceRange) ReadFieldStart(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SliceRange) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v76, err77 := iprot.ReadBinary()
	if err77 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "finish", p.ThriftName(), err77)
	}
	p.Finish = v76
	return err
}

func (p *SliceRange) ReadFieldFinish(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *SliceRange) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v78, err79 := iprot.ReadBool()
	if err79 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "reversed", p.ThriftName(), err79)
	}
	p.Reversed = v78
	return err
}

func (p *SliceRange) ReadFieldReversed(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *SliceRange) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v80, err81 := iprot.ReadI32()
	if err81 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "count", p.ThriftName(), err81)
	}
	p.Count = v80
	return err
}

func (p *SliceRange) ReadFieldCount(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *SliceRange) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("SliceRange")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SliceRange) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Start != nil {
		err = oprot.WriteFieldBegin("start", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "start", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Start)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "start", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "start", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SliceRange) WriteFieldStart(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SliceRange) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Finish != nil {
		err = oprot.WriteFieldBegin("finish", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "finish", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Finish)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "finish", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "finish", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SliceRange) WriteFieldFinish(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *SliceRange) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("reversed", thrift.BOOL, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "reversed", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.Reversed))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "reversed", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "reversed", p.ThriftName(), err)
	}
	return err
}

func (p *SliceRange) WriteFieldReversed(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *SliceRange) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("count", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "count", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Count))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "count", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "count", p.ThriftName(), err)
	}
	return err
}

func (p *SliceRange) WriteFieldCount(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *SliceRange) TStructName() string {
	return "SliceRange"
}

func (p *SliceRange) ThriftName() string {
	return "SliceRange"
}

func (p *SliceRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SliceRange(%+v)", *p)
}

func (p *SliceRange) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SliceRange)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *SliceRange) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Start
	case 2:
		return p.Finish
	case 3:
		return p.Reversed
	case 4:
		return p.Count
	}
	return nil
}

func (p *SliceRange) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("start", thrift.BINARY, 1),
		thrift.NewTField("finish", thrift.BINARY, 2),
		thrift.NewTField("reversed", thrift.BOOL, 3),
		thrift.NewTField("count", thrift.I32, 4),
	})
}

/**
 * A SlicePredicate is similar to a mathematic predicate (see http://en.wikipedia.org/wiki/Predicate_(mathematical_logic)),
 * which is described as "a property that the elements of a set have in common."
 * 
 * SlicePredicate's in Cassandra are described with either a list of column_names or a SliceRange.  If column_names is
 * specified, slice_range is ignored.
 * 
 * @param column_name. A list of column names to retrieve. This can be used similar to Memcached's "multi-get" feature
 *                     to fetch N known column names. For instance, if you know you wish to fetch columns 'Joe', 'Jack',
 *                     and 'Jim' you can pass those column names as a list to fetch all three at once.
 * @param slice_range. A SliceRange describing how to range, order, and/or limit the slice.
 * 
 * Attributes:
 *  - ColumnNames
 *  - SliceRange
 */
type SlicePredicate struct {
	thrift.TStruct
	ColumnNames thrift.TList "column_names" // 1
	SliceRange  *SliceRange  "slice_range"  // 2
}

func NewSlicePredicate() *SlicePredicate {
	output := &SlicePredicate{
		TStruct: thrift.NewTStruct("SlicePredicate", []thrift.TField{
			thrift.NewTField("column_names", thrift.LIST, 1),
			thrift.NewTField("slice_range", thrift.STRUCT, 2),
		}),
	}
	{
	}
	return output
}

func (p *SlicePredicate) IsSetColumnNames() bool {
	return p.ColumnNames != nil && p.ColumnNames.Len() > 0
}

func (p *SlicePredicate) IsSetSliceRange() bool {
	return p.SliceRange != nil
}

func (p *SlicePredicate) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "column_names" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "slice_range" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SlicePredicate) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype87, _size84, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ColumnNames", "", err)
	}
	p.ColumnNames = thrift.NewTList(_etype87, _size84)
	for _i88 := 0; _i88 < _size84; _i88++ {
		v90, err91 := iprot.ReadBinary()
		if err91 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem89", "", err91)
		}
		_elem89 := v90
		p.ColumnNames.Push(_elem89)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *SlicePredicate) ReadFieldColumnNames(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SlicePredicate) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.SliceRange = NewSliceRange()
	err94 := p.SliceRange.Read(iprot)
	if err94 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SliceRangeSliceRange", err94)
	}
	return err
}

func (p *SlicePredicate) ReadFieldSliceRange(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *SlicePredicate) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("SlicePredicate")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SlicePredicate) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnNames != nil {
		if p.IsSetColumnNames() {
			err = oprot.WriteFieldBegin("column_names", thrift.LIST, 1)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "column_names", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.BINARY, p.ColumnNames.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter95 := range p.ColumnNames.Iter() {
				Iter96 := Iter95.([]byte)
				err = oprot.WriteBinary(Iter96)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter96", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "column_names", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *SlicePredicate) WriteFieldColumnNames(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SlicePredicate) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.SliceRange != nil {
		if p.IsSetSliceRange() {
			err = oprot.WriteFieldBegin("slice_range", thrift.STRUCT, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "slice_range", p.ThriftName(), err)
			}
			err = p.SliceRange.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("SliceRange", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "slice_range", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *SlicePredicate) WriteFieldSliceRange(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *SlicePredicate) TStructName() string {
	return "SlicePredicate"
}

func (p *SlicePredicate) ThriftName() string {
	return "SlicePredicate"
}

func (p *SlicePredicate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SlicePredicate(%+v)", *p)
}

func (p *SlicePredicate) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SlicePredicate)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *SlicePredicate) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ColumnNames
	case 2:
		return p.SliceRange
	}
	return nil
}

func (p *SlicePredicate) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column_names", thrift.LIST, 1),
		thrift.NewTField("slice_range", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - ColumnName
 *  - Op
 *  - Value
 */
type IndexExpression struct {
	thrift.TStruct
	ColumnName []byte        "column_name" // 1
	Op         IndexOperator "op"          // 2
	Value      []byte        "value"       // 3
}

func NewIndexExpression() *IndexExpression {
	output := &IndexExpression{
		TStruct: thrift.NewTStruct("IndexExpression", []thrift.TField{
			thrift.NewTField("column_name", thrift.BINARY, 1),
			thrift.NewTField("op", thrift.I32, 2),
			thrift.NewTField("value", thrift.BINARY, 3),
		}),
	}
	{
		output.Op = math.MinInt32 - 1
	}
	return output
}

func (p *IndexExpression) IsSetOp() bool {
	return int64(p.Op) != math.MinInt32-1
}

func (p *IndexExpression) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "column_name" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "op" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "value" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IndexExpression) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v97, err98 := iprot.ReadBinary()
	if err98 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "column_name", p.ThriftName(), err98)
	}
	p.ColumnName = v97
	return err
}

func (p *IndexExpression) ReadFieldColumnName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *IndexExpression) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v99, err100 := iprot.ReadI32()
	if err100 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "op", p.ThriftName(), err100)
	}
	p.Op = IndexOperator(v99)
	return err
}

func (p *IndexExpression) ReadFieldOp(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *IndexExpression) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v101, err102 := iprot.ReadBinary()
	if err102 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "value", p.ThriftName(), err102)
	}
	p.Value = v101
	return err
}

func (p *IndexExpression) ReadFieldValue(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *IndexExpression) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("IndexExpression")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IndexExpression) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnName != nil {
		err = oprot.WriteFieldBegin("column_name", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "column_name", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.ColumnName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "column_name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "column_name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IndexExpression) WriteFieldColumnName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *IndexExpression) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetOp() {
		err = oprot.WriteFieldBegin("op", thrift.I32, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "op", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Op))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "op", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "op", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IndexExpression) WriteFieldOp(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *IndexExpression) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Value != nil {
		err = oprot.WriteFieldBegin("value", thrift.BINARY, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Value)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IndexExpression) WriteFieldValue(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *IndexExpression) TStructName() string {
	return "IndexExpression"
}

func (p *IndexExpression) ThriftName() string {
	return "IndexExpression"
}

func (p *IndexExpression) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IndexExpression(%+v)", *p)
}

func (p *IndexExpression) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*IndexExpression)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *IndexExpression) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ColumnName
	case 2:
		return p.Op
	case 3:
		return p.Value
	}
	return nil
}

func (p *IndexExpression) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column_name", thrift.BINARY, 1),
		thrift.NewTField("op", thrift.I32, 2),
		thrift.NewTField("value", thrift.BINARY, 3),
	})
}

/**
 * @deprecated use a KeyRange with row_filter in get_range_slices instead
 * 
 * Attributes:
 *  - Expressions
 *  - StartKey
 *  - Count
 */
type IndexClause struct {
	thrift.TStruct
	Expressions thrift.TList "expressions" // 1
	StartKey    []byte       "start_key"   // 2
	Count       int32        "count"       // 3
}

func NewIndexClause() *IndexClause {
	output := &IndexClause{
		TStruct: thrift.NewTStruct("IndexClause", []thrift.TField{
			thrift.NewTField("expressions", thrift.LIST, 1),
			thrift.NewTField("start_key", thrift.BINARY, 2),
			thrift.NewTField("count", thrift.I32, 3),
		}),
	}
	{
		output.Count = 100
	}
	return output
}

func (p *IndexClause) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "expressions" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "start_key" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "count" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IndexClause) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype108, _size105, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Expressions", "", err)
	}
	p.Expressions = thrift.NewTList(_etype108, _size105)
	for _i109 := 0; _i109 < _size105; _i109++ {
		_elem110 := NewIndexExpression()
		err113 := _elem110.Read(iprot)
		if err113 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem110IndexExpression", err113)
		}
		p.Expressions.Push(_elem110)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *IndexClause) ReadFieldExpressions(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *IndexClause) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v114, err115 := iprot.ReadBinary()
	if err115 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "start_key", p.ThriftName(), err115)
	}
	p.StartKey = v114
	return err
}

func (p *IndexClause) ReadFieldStartKey(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *IndexClause) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v116, err117 := iprot.ReadI32()
	if err117 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "count", p.ThriftName(), err117)
	}
	p.Count = v116
	return err
}

func (p *IndexClause) ReadFieldCount(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *IndexClause) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("IndexClause")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IndexClause) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Expressions != nil {
		err = oprot.WriteFieldBegin("expressions", thrift.LIST, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "expressions", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Expressions.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter118 := range p.Expressions.Iter() {
			Iter119 := Iter118.(*IndexExpression)
			err = Iter119.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("IndexExpression", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "expressions", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IndexClause) WriteFieldExpressions(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *IndexClause) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartKey != nil {
		err = oprot.WriteFieldBegin("start_key", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "start_key", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartKey)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "start_key", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "start_key", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IndexClause) WriteFieldStartKey(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *IndexClause) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("count", thrift.I32, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "count", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Count))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "count", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "count", p.ThriftName(), err)
	}
	return err
}

func (p *IndexClause) WriteFieldCount(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *IndexClause) TStructName() string {
	return "IndexClause"
}

func (p *IndexClause) ThriftName() string {
	return "IndexClause"
}

func (p *IndexClause) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IndexClause(%+v)", *p)
}

func (p *IndexClause) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*IndexClause)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *IndexClause) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Expressions
	case 2:
		return p.StartKey
	case 3:
		return p.Count
	}
	return nil
}

func (p *IndexClause) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("expressions", thrift.LIST, 1),
		thrift.NewTField("start_key", thrift.BINARY, 2),
		thrift.NewTField("count", thrift.I32, 3),
	})
}

/**
 * The semantics of start keys and tokens are slightly different.
 * Keys are start-inclusive; tokens are start-exclusive.  Token
 * ranges may also wrap -- that is, the end token may be less
 * than the start one.  Thus, a range from keyX to keyX is a
 * one-element range, but a range from tokenY to tokenY is the
 * full ring.
 * 
 * Attributes:
 *  - StartKey
 *  - EndKey
 *  - StartToken
 *  - EndToken
 *  - RowFilter
 *  - Count
 */
type KeyRange struct {
	thrift.TStruct
	StartKey   []byte       "start_key"   // 1
	EndKey     []byte       "end_key"     // 2
	StartToken string       "start_token" // 3
	EndToken   string       "end_token"   // 4
	Count      int32        "count"       // 5
	RowFilter  thrift.TList "row_filter"  // 6
}

func NewKeyRange() *KeyRange {
	output := &KeyRange{
		TStruct: thrift.NewTStruct("KeyRange", []thrift.TField{
			thrift.NewTField("start_key", thrift.BINARY, 1),
			thrift.NewTField("end_key", thrift.BINARY, 2),
			thrift.NewTField("start_token", thrift.STRING, 3),
			thrift.NewTField("end_token", thrift.STRING, 4),
			thrift.NewTField("row_filter", thrift.LIST, 6),
			thrift.NewTField("count", thrift.I32, 5),
		}),
	}
	{
		output.Count = 100
	}
	return output
}

func (p *KeyRange) IsSetStartKey() bool {
	return p.StartKey != nil
}

func (p *KeyRange) IsSetEndKey() bool {
	return p.EndKey != nil
}

func (p *KeyRange) IsSetStartToken() bool {
	return p.StartToken != ""
}

func (p *KeyRange) IsSetEndToken() bool {
	return p.EndToken != ""
}

func (p *KeyRange) IsSetRowFilter() bool {
	return p.RowFilter != nil && p.RowFilter.Len() > 0
}

func (p *KeyRange) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "start_key" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "end_key" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "start_token" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "end_token" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 6 || fieldName == "row_filter" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "count" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *KeyRange) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v120, err121 := iprot.ReadBinary()
	if err121 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "start_key", p.ThriftName(), err121)
	}
	p.StartKey = v120
	return err
}

func (p *KeyRange) ReadFieldStartKey(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *KeyRange) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v122, err123 := iprot.ReadBinary()
	if err123 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "end_key", p.ThriftName(), err123)
	}
	p.EndKey = v122
	return err
}

func (p *KeyRange) ReadFieldEndKey(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *KeyRange) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v124, err125 := iprot.ReadString()
	if err125 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "start_token", p.ThriftName(), err125)
	}
	p.StartToken = v124
	return err
}

func (p *KeyRange) ReadFieldStartToken(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *KeyRange) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v126, err127 := iprot.ReadString()
	if err127 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "end_token", p.ThriftName(), err127)
	}
	p.EndToken = v126
	return err
}

func (p *KeyRange) ReadFieldEndToken(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *KeyRange) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype133, _size130, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.RowFilter", "", err)
	}
	p.RowFilter = thrift.NewTList(_etype133, _size130)
	for _i134 := 0; _i134 < _size130; _i134++ {
		_elem135 := NewIndexExpression()
		err138 := _elem135.Read(iprot)
		if err138 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem135IndexExpression", err138)
		}
		p.RowFilter.Push(_elem135)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *KeyRange) ReadFieldRowFilter(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField6(iprot)
}

func (p *KeyRange) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v139, err140 := iprot.ReadI32()
	if err140 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "count", p.ThriftName(), err140)
	}
	p.Count = v139
	return err
}

func (p *KeyRange) ReadFieldCount(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *KeyRange) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("KeyRange")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField6(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *KeyRange) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartKey != nil {
		if p.IsSetStartKey() {
			err = oprot.WriteFieldBegin("start_key", thrift.BINARY, 1)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "start_key", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.StartKey)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "start_key", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "start_key", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *KeyRange) WriteFieldStartKey(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *KeyRange) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.EndKey != nil {
		if p.IsSetEndKey() {
			err = oprot.WriteFieldBegin("end_key", thrift.BINARY, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "end_key", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.EndKey)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "end_key", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "end_key", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *KeyRange) WriteFieldEndKey(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *KeyRange) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetStartToken() {
		err = oprot.WriteFieldBegin("start_token", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "start_token", p.ThriftName(), err)
		}
		err = oprot.WriteString(string(p.StartToken))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "start_token", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "start_token", p.ThriftName(), err)
		}
	}
	return err
}

func (p *KeyRange) WriteFieldStartToken(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *KeyRange) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetEndToken() {
		err = oprot.WriteFieldBegin("end_token", thrift.STRING, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "end_token", p.ThriftName(), err)
		}
		err = oprot.WriteString(string(p.EndToken))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "end_token", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "end_token", p.ThriftName(), err)
		}
	}
	return err
}

func (p *KeyRange) WriteFieldEndToken(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *KeyRange) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("count", thrift.I32, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "count", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Count))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "count", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "count", p.ThriftName(), err)
	}
	return err
}

func (p *KeyRange) WriteFieldCount(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *KeyRange) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.RowFilter != nil {
		if p.IsSetRowFilter() {
			err = oprot.WriteFieldBegin("row_filter", thrift.LIST, 6)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(6, "row_filter", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.STRUCT, p.RowFilter.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter141 := range p.RowFilter.Iter() {
				Iter142 := Iter141.(*IndexExpression)
				err = Iter142.Write(oprot)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteStruct("IndexExpression", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(6, "row_filter", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *KeyRange) WriteFieldRowFilter(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField6(oprot)
}

func (p *KeyRange) TStructName() string {
	return "KeyRange"
}

func (p *KeyRange) ThriftName() string {
	return "KeyRange"
}

func (p *KeyRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KeyRange(%+v)", *p)
}

func (p *KeyRange) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*KeyRange)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *KeyRange) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.StartKey
	case 2:
		return p.EndKey
	case 3:
		return p.StartToken
	case 4:
		return p.EndToken
	case 6:
		return p.RowFilter
	case 5:
		return p.Count
	}
	return nil
}

func (p *KeyRange) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("start_key", thrift.BINARY, 1),
		thrift.NewTField("end_key", thrift.BINARY, 2),
		thrift.NewTField("start_token", thrift.STRING, 3),
		thrift.NewTField("end_token", thrift.STRING, 4),
		thrift.NewTField("row_filter", thrift.LIST, 6),
		thrift.NewTField("count", thrift.I32, 5),
	})
}

/**
 * A KeySlice is key followed by the data it maps to. A collection of KeySlice is returned by the get_range_slice operation.
 * 
 * @param key. a row key
 * @param columns. List of data represented by the key. Typically, the list is pared down to only the columns specified by
 *                 a SlicePredicate.
 * 
 * Attributes:
 *  - Key
 *  - Columns
 */
type KeySlice struct {
	thrift.TStruct
	Key     []byte       "key"     // 1
	Columns thrift.TList "columns" // 2
}

func NewKeySlice() *KeySlice {
	output := &KeySlice{
		TStruct: thrift.NewTStruct("KeySlice", []thrift.TField{
			thrift.NewTField("key", thrift.BINARY, 1),
			thrift.NewTField("columns", thrift.LIST, 2),
		}),
	}
	{
	}
	return output
}

func (p *KeySlice) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "key" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "columns" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *KeySlice) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v143, err144 := iprot.ReadBinary()
	if err144 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err144)
	}
	p.Key = v143
	return err
}

func (p *KeySlice) ReadFieldKey(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *KeySlice) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype150, _size147, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	p.Columns = thrift.NewTList(_etype150, _size147)
	for _i151 := 0; _i151 < _size147; _i151++ {
		_elem152 := NewColumnOrSuperColumn()
		err155 := _elem152.Read(iprot)
		if err155 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem152ColumnOrSuperColumn", err155)
		}
		p.Columns.Push(_elem152)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *KeySlice) ReadFieldColumns(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *KeySlice) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("KeySlice")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *KeySlice) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Key != nil {
		err = oprot.WriteFieldBegin("key", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Key)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
	}
	return err
}

func (p *KeySlice) WriteFieldKey(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *KeySlice) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Columns.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter156 := range p.Columns.Iter() {
			Iter157 := Iter156.(*ColumnOrSuperColumn)
			err = Iter157.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("ColumnOrSuperColumn", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *KeySlice) WriteFieldColumns(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *KeySlice) TStructName() string {
	return "KeySlice"
}

func (p *KeySlice) ThriftName() string {
	return "KeySlice"
}

func (p *KeySlice) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KeySlice(%+v)", *p)
}

func (p *KeySlice) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*KeySlice)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *KeySlice) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.Columns
	}
	return nil
}

func (p *KeySlice) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.BINARY, 1),
		thrift.NewTField("columns", thrift.LIST, 2),
	})
}

/**
 * Attributes:
 *  - Key
 *  - Count
 */
type KeyCount struct {
	thrift.TStruct
	Key   []byte "key"   // 1
	Count int32  "count" // 2
}

func NewKeyCount() *KeyCount {
	output := &KeyCount{
		TStruct: thrift.NewTStruct("KeyCount", []thrift.TField{
			thrift.NewTField("key", thrift.BINARY, 1),
			thrift.NewTField("count", thrift.I32, 2),
		}),
	}
	{
	}
	return output
}

func (p *KeyCount) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "key" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "count" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *KeyCount) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v158, err159 := iprot.ReadBinary()
	if err159 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err159)
	}
	p.Key = v158
	return err
}

func (p *KeyCount) ReadFieldKey(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *KeyCount) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v160, err161 := iprot.ReadI32()
	if err161 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "count", p.ThriftName(), err161)
	}
	p.Count = v160
	return err
}

func (p *KeyCount) ReadFieldCount(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *KeyCount) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("KeyCount")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *KeyCount) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Key != nil {
		err = oprot.WriteFieldBegin("key", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Key)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
	}
	return err
}

func (p *KeyCount) WriteFieldKey(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *KeyCount) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("count", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "count", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Count))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "count", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "count", p.ThriftName(), err)
	}
	return err
}

func (p *KeyCount) WriteFieldCount(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *KeyCount) TStructName() string {
	return "KeyCount"
}

func (p *KeyCount) ThriftName() string {
	return "KeyCount"
}

func (p *KeyCount) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KeyCount(%+v)", *p)
}

func (p *KeyCount) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*KeyCount)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *KeyCount) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.Count
	}
	return nil
}

func (p *KeyCount) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.BINARY, 1),
		thrift.NewTField("count", thrift.I32, 2),
	})
}

/**
 * Note that the timestamp is only optional in case of counter deletion.
 * 
 * Attributes:
 *  - Timestamp
 *  - SuperColumn
 *  - Predicate
 */
type Deletion struct {
	thrift.TStruct
	Timestamp   int64           "timestamp"    // 1
	SuperColumn []byte          "super_column" // 2
	Predicate   *SlicePredicate "predicate"    // 3
}

func NewDeletion() *Deletion {
	output := &Deletion{
		TStruct: thrift.NewTStruct("Deletion", []thrift.TField{
			thrift.NewTField("timestamp", thrift.I64, 1),
			thrift.NewTField("super_column", thrift.BINARY, 2),
			thrift.NewTField("predicate", thrift.STRUCT, 3),
		}),
	}
	{
	}
	return output
}

func (p *Deletion) IsSetTimestamp() bool {
	return p.Timestamp != 0
}

func (p *Deletion) IsSetSuperColumn() bool {
	return p.SuperColumn != nil
}

func (p *Deletion) IsSetPredicate() bool {
	return p.Predicate != nil
}

func (p *Deletion) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "timestamp" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "super_column" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "predicate" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Deletion) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v162, err163 := iprot.ReadI64()
	if err163 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "timestamp", p.ThriftName(), err163)
	}
	p.Timestamp = v162
	return err
}

func (p *Deletion) ReadFieldTimestamp(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *Deletion) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v164, err165 := iprot.ReadBinary()
	if err165 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "super_column", p.ThriftName(), err165)
	}
	p.SuperColumn = v164
	return err
}

func (p *Deletion) ReadFieldSuperColumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *Deletion) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Predicate = NewSlicePredicate()
	err168 := p.Predicate.Read(iprot)
	if err168 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.PredicateSlicePredicate", err168)
	}
	return err
}

func (p *Deletion) ReadFieldPredicate(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *Deletion) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Deletion")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Deletion) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetTimestamp() {
		err = oprot.WriteFieldBegin("timestamp", thrift.I64, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "timestamp", p.ThriftName(), err)
		}
		err = oprot.WriteI64(int64(p.Timestamp))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "timestamp", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "timestamp", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Deletion) WriteFieldTimestamp(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *Deletion) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.SuperColumn != nil {
		if p.IsSetSuperColumn() {
			err = oprot.WriteFieldBegin("super_column", thrift.BINARY, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "super_column", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.SuperColumn)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "super_column", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "super_column", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *Deletion) WriteFieldSuperColumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *Deletion) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Predicate != nil {
		if p.IsSetPredicate() {
			err = oprot.WriteFieldBegin("predicate", thrift.STRUCT, 3)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
			}
			err = p.Predicate.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("SlicePredicate", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(3, "predicate", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *Deletion) WriteFieldPredicate(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *Deletion) TStructName() string {
	return "Deletion"
}

func (p *Deletion) ThriftName() string {
	return "Deletion"
}

func (p *Deletion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Deletion(%+v)", *p)
}

func (p *Deletion) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*Deletion)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *Deletion) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Timestamp
	case 2:
		return p.SuperColumn
	case 3:
		return p.Predicate
	}
	return nil
}

func (p *Deletion) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("timestamp", thrift.I64, 1),
		thrift.NewTField("super_column", thrift.BINARY, 2),
		thrift.NewTField("predicate", thrift.STRUCT, 3),
	})
}

/**
 * A Mutation is either an insert (represented by filling column_or_supercolumn) or a deletion (represented by filling the deletion attribute).
 * @param column_or_supercolumn. An insert to a column or supercolumn (possibly counter column or supercolumn)
 * @param deletion. A deletion of a column or supercolumn
 * 
 * Attributes:
 *  - ColumnOrSupercolumn
 *  - Deletion
 */
type Mutation struct {
	thrift.TStruct
	ColumnOrSupercolumn *ColumnOrSuperColumn "column_or_supercolumn" // 1
	Deletion            *Deletion            "deletion"              // 2
}

func NewMutation() *Mutation {
	output := &Mutation{
		TStruct: thrift.NewTStruct("Mutation", []thrift.TField{
			thrift.NewTField("column_or_supercolumn", thrift.STRUCT, 1),
			thrift.NewTField("deletion", thrift.STRUCT, 2),
		}),
	}
	{
	}
	return output
}

func (p *Mutation) IsSetColumnOrSupercolumn() bool {
	return p.ColumnOrSupercolumn != nil
}

func (p *Mutation) IsSetDeletion() bool {
	return p.Deletion != nil
}

func (p *Mutation) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "column_or_supercolumn" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "deletion" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Mutation) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.ColumnOrSupercolumn = NewColumnOrSuperColumn()
	err171 := p.ColumnOrSupercolumn.Read(iprot)
	if err171 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ColumnOrSupercolumnColumnOrSuperColumn", err171)
	}
	return err
}

func (p *Mutation) ReadFieldColumnOrSupercolumn(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *Mutation) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Deletion = NewDeletion()
	err174 := p.Deletion.Read(iprot)
	if err174 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.DeletionDeletion", err174)
	}
	return err
}

func (p *Mutation) ReadFieldDeletion(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *Mutation) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Mutation")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Mutation) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnOrSupercolumn != nil {
		if p.IsSetColumnOrSupercolumn() {
			err = oprot.WriteFieldBegin("column_or_supercolumn", thrift.STRUCT, 1)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "column_or_supercolumn", p.ThriftName(), err)
			}
			err = p.ColumnOrSupercolumn.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("ColumnOrSuperColumn", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(1, "column_or_supercolumn", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *Mutation) WriteFieldColumnOrSupercolumn(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *Mutation) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Deletion != nil {
		if p.IsSetDeletion() {
			err = oprot.WriteFieldBegin("deletion", thrift.STRUCT, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "deletion", p.ThriftName(), err)
			}
			err = p.Deletion.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Deletion", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "deletion", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *Mutation) WriteFieldDeletion(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *Mutation) TStructName() string {
	return "Mutation"
}

func (p *Mutation) ThriftName() string {
	return "Mutation"
}

func (p *Mutation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Mutation(%+v)", *p)
}

func (p *Mutation) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*Mutation)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *Mutation) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ColumnOrSupercolumn
	case 2:
		return p.Deletion
	}
	return nil
}

func (p *Mutation) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("column_or_supercolumn", thrift.STRUCT, 1),
		thrift.NewTField("deletion", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - Host
 *  - Datacenter
 *  - Rack
 */
type EndpointDetails struct {
	thrift.TStruct
	Host       string "host"       // 1
	Datacenter string "datacenter" // 2
	Rack       string "rack"       // 3
}

func NewEndpointDetails() *EndpointDetails {
	output := &EndpointDetails{
		TStruct: thrift.NewTStruct("EndpointDetails", []thrift.TField{
			thrift.NewTField("host", thrift.STRING, 1),
			thrift.NewTField("datacenter", thrift.STRING, 2),
			thrift.NewTField("rack", thrift.STRING, 3),
		}),
	}
	{
	}
	return output
}

func (p *EndpointDetails) IsSetRack() bool {
	return p.Rack != ""
}

func (p *EndpointDetails) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "host" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "datacenter" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "rack" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *EndpointDetails) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v175, err176 := iprot.ReadString()
	if err176 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "host", p.ThriftName(), err176)
	}
	p.Host = v175
	return err
}

func (p *EndpointDetails) ReadFieldHost(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *EndpointDetails) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v177, err178 := iprot.ReadString()
	if err178 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "datacenter", p.ThriftName(), err178)
	}
	p.Datacenter = v177
	return err
}

func (p *EndpointDetails) ReadFieldDatacenter(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *EndpointDetails) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v179, err180 := iprot.ReadString()
	if err180 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "rack", p.ThriftName(), err180)
	}
	p.Rack = v179
	return err
}

func (p *EndpointDetails) ReadFieldRack(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *EndpointDetails) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("EndpointDetails")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *EndpointDetails) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("host", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "host", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Host))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "host", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "host", p.ThriftName(), err)
	}
	return err
}

func (p *EndpointDetails) WriteFieldHost(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *EndpointDetails) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("datacenter", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "datacenter", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Datacenter))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "datacenter", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "datacenter", p.ThriftName(), err)
	}
	return err
}

func (p *EndpointDetails) WriteFieldDatacenter(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *EndpointDetails) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetRack() {
		err = oprot.WriteFieldBegin("rack", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "rack", p.ThriftName(), err)
		}
		err = oprot.WriteString(string(p.Rack))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "rack", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "rack", p.ThriftName(), err)
		}
	}
	return err
}

func (p *EndpointDetails) WriteFieldRack(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *EndpointDetails) TStructName() string {
	return "EndpointDetails"
}

func (p *EndpointDetails) ThriftName() string {
	return "EndpointDetails"
}

func (p *EndpointDetails) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EndpointDetails(%+v)", *p)
}

func (p *EndpointDetails) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*EndpointDetails)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *EndpointDetails) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Host
	case 2:
		return p.Datacenter
	case 3:
		return p.Rack
	}
	return nil
}

func (p *EndpointDetails) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("host", thrift.STRING, 1),
		thrift.NewTField("datacenter", thrift.STRING, 2),
		thrift.NewTField("rack", thrift.STRING, 3),
	})
}

/**
 * A TokenRange describes part of the Cassandra ring, it is a mapping from a range to
 * endpoints responsible for that range.
 * @param start_token The first token in the range
 * @param end_token The last token in the range
 * @param endpoints The endpoints responsible for the range (listed by their configured listen_address)
 * @param rpc_endpoints The endpoints responsible for the range (listed by their configured rpc_address)
 * 
 * Attributes:
 *  - StartToken
 *  - EndToken
 *  - Endpoints
 *  - RpcEndpoints
 *  - EndpointDetails
 */
type TokenRange struct {
	thrift.TStruct
	StartToken      string       "start_token"      // 1
	EndToken        string       "end_token"        // 2
	Endpoints       thrift.TList "endpoints"        // 3
	RpcEndpoints    thrift.TList "rpc_endpoints"    // 4
	EndpointDetails thrift.TList "endpoint_details" // 5
}

func NewTokenRange() *TokenRange {
	output := &TokenRange{
		TStruct: thrift.NewTStruct("TokenRange", []thrift.TField{
			thrift.NewTField("start_token", thrift.STRING, 1),
			thrift.NewTField("end_token", thrift.STRING, 2),
			thrift.NewTField("endpoints", thrift.LIST, 3),
			thrift.NewTField("rpc_endpoints", thrift.LIST, 4),
			thrift.NewTField("endpoint_details", thrift.LIST, 5),
		}),
	}
	{
	}
	return output
}

func (p *TokenRange) IsSetRpcEndpoints() bool {
	return p.RpcEndpoints != nil && p.RpcEndpoints.Len() > 0
}

func (p *TokenRange) IsSetEndpointDetails() bool {
	return p.EndpointDetails != nil && p.EndpointDetails.Len() > 0
}

func (p *TokenRange) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "start_token" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "end_token" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "endpoints" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "rpc_endpoints" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "endpoint_details" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TokenRange) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v181, err182 := iprot.ReadString()
	if err182 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "start_token", p.ThriftName(), err182)
	}
	p.StartToken = v181
	return err
}

func (p *TokenRange) ReadFieldStartToken(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *TokenRange) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v183, err184 := iprot.ReadString()
	if err184 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "end_token", p.ThriftName(), err184)
	}
	p.EndToken = v183
	return err
}

func (p *TokenRange) ReadFieldEndToken(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *TokenRange) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype190, _size187, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Endpoints", "", err)
	}
	p.Endpoints = thrift.NewTList(_etype190, _size187)
	for _i191 := 0; _i191 < _size187; _i191++ {
		v193, err194 := iprot.ReadString()
		if err194 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem192", "", err194)
		}
		_elem192 := v193
		p.Endpoints.Push(_elem192)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *TokenRange) ReadFieldEndpoints(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *TokenRange) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype200, _size197, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.RpcEndpoints", "", err)
	}
	p.RpcEndpoints = thrift.NewTList(_etype200, _size197)
	for _i201 := 0; _i201 < _size197; _i201++ {
		v203, err204 := iprot.ReadString()
		if err204 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem202", "", err204)
		}
		_elem202 := v203
		p.RpcEndpoints.Push(_elem202)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *TokenRange) ReadFieldRpcEndpoints(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *TokenRange) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype210, _size207, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.EndpointDetails", "", err)
	}
	p.EndpointDetails = thrift.NewTList(_etype210, _size207)
	for _i211 := 0; _i211 < _size207; _i211++ {
		_elem212 := NewEndpointDetails()
		err215 := _elem212.Read(iprot)
		if err215 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem212EndpointDetails", err215)
		}
		p.EndpointDetails.Push(_elem212)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *TokenRange) ReadFieldEndpointDetails(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *TokenRange) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TokenRange")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TokenRange) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("start_token", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "start_token", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.StartToken))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "start_token", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "start_token", p.ThriftName(), err)
	}
	return err
}

func (p *TokenRange) WriteFieldStartToken(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *TokenRange) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("end_token", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "end_token", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.EndToken))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "end_token", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "end_token", p.ThriftName(), err)
	}
	return err
}

func (p *TokenRange) WriteFieldEndToken(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *TokenRange) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Endpoints != nil {
		err = oprot.WriteFieldBegin("endpoints", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "endpoints", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, p.Endpoints.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter216 := range p.Endpoints.Iter() {
			Iter217 := Iter216.(string)
			err = oprot.WriteString(string(Iter217))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter217", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "endpoints", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TokenRange) WriteFieldEndpoints(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *TokenRange) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.RpcEndpoints != nil {
		if p.IsSetRpcEndpoints() {
			err = oprot.WriteFieldBegin("rpc_endpoints", thrift.LIST, 4)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "rpc_endpoints", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.STRING, p.RpcEndpoints.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter218 := range p.RpcEndpoints.Iter() {
				Iter219 := Iter218.(string)
				err = oprot.WriteString(string(Iter219))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter219", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "rpc_endpoints", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *TokenRange) WriteFieldRpcEndpoints(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *TokenRange) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.EndpointDetails != nil {
		if p.IsSetEndpointDetails() {
			err = oprot.WriteFieldBegin("endpoint_details", thrift.LIST, 5)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(5, "endpoint_details", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.STRUCT, p.EndpointDetails.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter220 := range p.EndpointDetails.Iter() {
				Iter221 := Iter220.(*EndpointDetails)
				err = Iter221.Write(oprot)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteStruct("EndpointDetails", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(5, "endpoint_details", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *TokenRange) WriteFieldEndpointDetails(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *TokenRange) TStructName() string {
	return "TokenRange"
}

func (p *TokenRange) ThriftName() string {
	return "TokenRange"
}

func (p *TokenRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TokenRange(%+v)", *p)
}

func (p *TokenRange) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*TokenRange)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *TokenRange) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.StartToken
	case 2:
		return p.EndToken
	case 3:
		return p.Endpoints
	case 4:
		return p.RpcEndpoints
	case 5:
		return p.EndpointDetails
	}
	return nil
}

func (p *TokenRange) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("start_token", thrift.STRING, 1),
		thrift.NewTField("end_token", thrift.STRING, 2),
		thrift.NewTField("endpoints", thrift.LIST, 3),
		thrift.NewTField("rpc_endpoints", thrift.LIST, 4),
		thrift.NewTField("endpoint_details", thrift.LIST, 5),
	})
}

/**
 * Authentication requests can contain any data, dependent on the IAuthenticator used
 * 
 * Attributes:
 *  - Credentials
 */
type AuthenticationRequest struct {
	thrift.TStruct
	Credentials thrift.TMap "credentials" // 1
}

func NewAuthenticationRequest() *AuthenticationRequest {
	output := &AuthenticationRequest{
		TStruct: thrift.NewTStruct("AuthenticationRequest", []thrift.TField{
			thrift.NewTField("credentials", thrift.MAP, 1),
		}),
	}
	{
	}
	return output
}

func (p *AuthenticationRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "credentials" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AuthenticationRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype225, _vtype226, _size224, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Credentials", "", err)
	}
	p.Credentials = thrift.NewTMap(_ktype225, _vtype226, _size224)
	for _i228 := 0; _i228 < _size224; _i228++ {
		v231, err232 := iprot.ReadString()
		if err232 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key229", "", err232)
		}
		_key229 := v231
		v233, err234 := iprot.ReadString()
		if err234 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val230", "", err234)
		}
		_val230 := v233
		p.Credentials.Set(_key229, _val230)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *AuthenticationRequest) ReadFieldCredentials(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *AuthenticationRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("AuthenticationRequest")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AuthenticationRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Credentials != nil {
		err = oprot.WriteFieldBegin("credentials", thrift.MAP, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "credentials", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.Credentials.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter235 := range p.Credentials.Iter() {
			Kiter236, Viter237 := Miter235.Key().(string), Miter235.Value().(string)
			err = oprot.WriteString(string(Kiter236))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter236", "", err)
			}
			err = oprot.WriteString(string(Viter237))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter237", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "credentials", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AuthenticationRequest) WriteFieldCredentials(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *AuthenticationRequest) TStructName() string {
	return "AuthenticationRequest"
}

func (p *AuthenticationRequest) ThriftName() string {
	return "AuthenticationRequest"
}

func (p *AuthenticationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthenticationRequest(%+v)", *p)
}

func (p *AuthenticationRequest) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*AuthenticationRequest)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *AuthenticationRequest) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Credentials
	}
	return nil
}

func (p *AuthenticationRequest) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("credentials", thrift.MAP, 1),
	})
}

/**
 * Attributes:
 *  - Name
 *  - ValidationClass
 *  - IndexType
 *  - IndexName
 *  - IndexOptions
 */
type ColumnDef struct {
	thrift.TStruct
	Name            []byte      "name"             // 1
	ValidationClass string      "validation_class" // 2
	IndexType       IndexType   "index_type"       // 3
	IndexName       string      "index_name"       // 4
	IndexOptions    thrift.TMap "index_options"    // 5
}

func NewColumnDef() *ColumnDef {
	output := &ColumnDef{
		TStruct: thrift.NewTStruct("ColumnDef", []thrift.TField{
			thrift.NewTField("name", thrift.BINARY, 1),
			thrift.NewTField("validation_class", thrift.STRING, 2),
			thrift.NewTField("index_type", thrift.I32, 3),
			thrift.NewTField("index_name", thrift.STRING, 4),
			thrift.NewTField("index_options", thrift.MAP, 5),
		}),
	}
	{
		output.IndexType = math.MinInt32 - 1
	}
	return output
}

func (p *ColumnDef) IsSetIndexType() bool {
	return int64(p.IndexType) != math.MinInt32-1
}

func (p *ColumnDef) IsSetIndexName() bool {
	return p.IndexName != ""
}

func (p *ColumnDef) IsSetIndexOptions() bool {
	return p.IndexOptions != nil && p.IndexOptions.Len() > 0
}

func (p *ColumnDef) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "name" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "validation_class" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "index_type" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "index_name" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "index_options" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDef) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v238, err239 := iprot.ReadBinary()
	if err239 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err239)
	}
	p.Name = v238
	return err
}

func (p *ColumnDef) ReadFieldName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ColumnDef) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v240, err241 := iprot.ReadString()
	if err241 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "validation_class", p.ThriftName(), err241)
	}
	p.ValidationClass = v240
	return err
}

func (p *ColumnDef) ReadFieldValidationClass(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *ColumnDef) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v242, err243 := iprot.ReadI32()
	if err243 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "index_type", p.ThriftName(), err243)
	}
	p.IndexType = IndexType(v242)
	return err
}

func (p *ColumnDef) ReadFieldIndexType(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *ColumnDef) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v244, err245 := iprot.ReadString()
	if err245 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "index_name", p.ThriftName(), err245)
	}
	p.IndexName = v244
	return err
}

func (p *ColumnDef) ReadFieldIndexName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *ColumnDef) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype249, _vtype250, _size248, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.IndexOptions", "", err)
	}
	p.IndexOptions = thrift.NewTMap(_ktype249, _vtype250, _size248)
	for _i252 := 0; _i252 < _size248; _i252++ {
		v255, err256 := iprot.ReadString()
		if err256 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key253", "", err256)
		}
		_key253 := v255
		v257, err258 := iprot.ReadString()
		if err258 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val254", "", err258)
		}
		_val254 := v257
		p.IndexOptions.Set(_key253, _val254)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ColumnDef) ReadFieldIndexOptions(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *ColumnDef) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("ColumnDef")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDef) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Name != nil {
		err = oprot.WriteFieldBegin("name", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Name)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ColumnDef) WriteFieldName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ColumnDef) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("validation_class", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "validation_class", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.ValidationClass))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "validation_class", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "validation_class", p.ThriftName(), err)
	}
	return err
}

func (p *ColumnDef) WriteFieldValidationClass(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *ColumnDef) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetIndexType() {
		err = oprot.WriteFieldBegin("index_type", thrift.I32, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "index_type", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.IndexType))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "index_type", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "index_type", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ColumnDef) WriteFieldIndexType(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *ColumnDef) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetIndexName() {
		err = oprot.WriteFieldBegin("index_name", thrift.STRING, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "index_name", p.ThriftName(), err)
		}
		err = oprot.WriteString(string(p.IndexName))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "index_name", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "index_name", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ColumnDef) WriteFieldIndexName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *ColumnDef) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IndexOptions != nil {
		if p.IsSetIndexOptions() {
			err = oprot.WriteFieldBegin("index_options", thrift.MAP, 5)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(5, "index_options", p.ThriftName(), err)
			}
			err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.IndexOptions.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			for Miter259 := range p.IndexOptions.Iter() {
				Kiter260, Viter261 := Miter259.Key().(string), Miter259.Value().(string)
				err = oprot.WriteString(string(Kiter260))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Kiter260", "", err)
				}
				err = oprot.WriteString(string(Viter261))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Viter261", "", err)
				}
			}
			err = oprot.WriteMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(5, "index_options", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *ColumnDef) WriteFieldIndexOptions(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *ColumnDef) TStructName() string {
	return "ColumnDef"
}

func (p *ColumnDef) ThriftName() string {
	return "ColumnDef"
}

func (p *ColumnDef) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnDef(%+v)", *p)
}

func (p *ColumnDef) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ColumnDef)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ColumnDef) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Name
	case 2:
		return p.ValidationClass
	case 3:
		return p.IndexType
	case 4:
		return p.IndexName
	case 5:
		return p.IndexOptions
	}
	return nil
}

func (p *ColumnDef) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("name", thrift.BINARY, 1),
		thrift.NewTField("validation_class", thrift.STRING, 2),
		thrift.NewTField("index_type", thrift.I32, 3),
		thrift.NewTField("index_name", thrift.STRING, 4),
		thrift.NewTField("index_options", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Keyspace
 *  - Name
 *  - ColumnType
 *  - ComparatorType
 *  - SubcomparatorType
 *  - Comment
 *  - ReadRepairChance
 *  - ColumnMetadata
 *  - GcGraceSeconds
 *  - DefaultValidationClass
 *  - Id
 *  - MinCompactionThreshold
 *  - MaxCompactionThreshold
 *  - ReplicateOnWrite
 *  - KeyValidationClass
 *  - KeyAlias
 *  - CompactionStrategy
 *  - CompactionStrategyOptions
 *  - CompressionOptions
 *  - BloomFilterFpChance
 *  - Caching
 *  - DclocalReadRepairChance
 *  - PopulateIoCacheOnFlush
 *  - MemtableFlushPeriodInMs
 *  - DefaultTimeToLive
 *  - IndexInterval
 *  - SpeculativeRetry
 *  - RowCacheSize: @deprecated
 *  - KeyCacheSize: @deprecated
 *  - RowCacheSavePeriodInSeconds: @deprecated
 *  - KeyCacheSavePeriodInSeconds: @deprecated
 *  - MemtableFlushAfterMins: @deprecated
 *  - MemtableThroughputInMb: @deprecated
 *  - MemtableOperationsInMillions: @deprecated
 *  - MergeShardsChance: @deprecated
 *  - RowCacheProvider: @deprecated
 *  - RowCacheKeysToSave: @deprecated
 */
type CfDef struct {
	thrift.TStruct
	Keyspace                     string       "keyspace"    // 1
	Name                         string       "name"        // 2
	ColumnType                   string       "column_type" // 3
	_                            interface{}  // nil # 4
	ComparatorType               string       "comparator_type"    // 5
	SubcomparatorType            string       "subcomparator_type" // 6
	_                            interface{}  // nil # 7
	Comment                      string       "comment"        // 8
	RowCacheSize                 float64      "row_cache_size" // 9
	_                            interface{}  // nil # 10
	KeyCacheSize                 float64      "key_cache_size"                   // 11
	ReadRepairChance             float64      "read_repair_chance"               // 12
	ColumnMetadata               thrift.TList "column_metadata"                  // 13
	GcGraceSeconds               int32        "gc_grace_seconds"                 // 14
	DefaultValidationClass       string       "default_validation_class"         // 15
	Id                           int32        "id"                               // 16
	MinCompactionThreshold       int32        "min_compaction_threshold"         // 17
	MaxCompactionThreshold       int32        "max_compaction_threshold"         // 18
	RowCacheSavePeriodInSeconds  int32        "row_cache_save_period_in_seconds" // 19
	KeyCacheSavePeriodInSeconds  int32        "key_cache_save_period_in_seconds" // 20
	MemtableFlushAfterMins       int32        "memtable_flush_after_mins"        // 21
	MemtableThroughputInMb       int32        "memtable_throughput_in_mb"        // 22
	MemtableOperationsInMillions float64      "memtable_operations_in_millions"  // 23
	ReplicateOnWrite             bool         "replicate_on_write"               // 24
	MergeShardsChance            float64      "merge_shards_chance"              // 25
	KeyValidationClass           string       "key_validation_class"             // 26
	RowCacheProvider             string       "row_cache_provider"               // 27
	KeyAlias                     []byte       "key_alias"                        // 28
	CompactionStrategy           string       "compaction_strategy"              // 29
	CompactionStrategyOptions    thrift.TMap  "compaction_strategy_options"      // 30
	RowCacheKeysToSave           int32        "row_cache_keys_to_save"           // 31
	CompressionOptions           thrift.TMap  "compression_options"              // 32
	BloomFilterFpChance          float64      "bloom_filter_fp_chance"           // 33
	Caching                      string       "caching"                          // 34
	_                            interface{}  // nil # 35
	_                            interface{}  // nil # 36
	DclocalReadRepairChance      float64      "dclocal_read_repair_chance"  // 37
	PopulateIoCacheOnFlush       bool         "populate_io_cache_on_flush"  // 38
	MemtableFlushPeriodInMs      int32        "memtable_flush_period_in_ms" // 39
	DefaultTimeToLive            int32        "default_time_to_live"        // 40
	IndexInterval                int32        "index_interval"              // 41
	SpeculativeRetry             string       "speculative_retry"           // 42
}

func NewCfDef() *CfDef {
	output := &CfDef{
		TStruct: thrift.NewTStruct("CfDef", []thrift.TField{
			thrift.NewTField("keyspace", thrift.STRING, 1),
			thrift.NewTField("name", thrift.STRING, 2),
			thrift.NewTField("column_type", thrift.STRING, 3),
			thrift.NewTField("comparator_type", thrift.STRING, 5),
			thrift.NewTField("subcomparator_type", thrift.STRING, 6),
			thrift.NewTField("comment", thrift.STRING, 8),
			thrift.NewTField("read_repair_chance", thrift.DOUBLE, 12),
			thrift.NewTField("column_metadata", thrift.LIST, 13),
			thrift.NewTField("gc_grace_seconds", thrift.I32, 14),
			thrift.NewTField("default_validation_class", thrift.STRING, 15),
			thrift.NewTField("id", thrift.I32, 16),
			thrift.NewTField("min_compaction_threshold", thrift.I32, 17),
			thrift.NewTField("max_compaction_threshold", thrift.I32, 18),
			thrift.NewTField("replicate_on_write", thrift.BOOL, 24),
			thrift.NewTField("key_validation_class", thrift.STRING, 26),
			thrift.NewTField("key_alias", thrift.BINARY, 28),
			thrift.NewTField("compaction_strategy", thrift.STRING, 29),
			thrift.NewTField("compaction_strategy_options", thrift.MAP, 30),
			thrift.NewTField("compression_options", thrift.MAP, 32),
			thrift.NewTField("bloom_filter_fp_chance", thrift.DOUBLE, 33),
			thrift.NewTField("caching", thrift.STRING, 34),
			thrift.NewTField("dclocal_read_repair_chance", thrift.DOUBLE, 37),
			thrift.NewTField("populate_io_cache_on_flush", thrift.BOOL, 38),
			thrift.NewTField("memtable_flush_period_in_ms", thrift.I32, 39),
			thrift.NewTField("default_time_to_live", thrift.I32, 40),
			thrift.NewTField("index_interval", thrift.I32, 41),
			thrift.NewTField("speculative_retry", thrift.STRING, 42),
			thrift.NewTField("row_cache_size", thrift.DOUBLE, 9),
			thrift.NewTField("key_cache_size", thrift.DOUBLE, 11),
			thrift.NewTField("row_cache_save_period_in_seconds", thrift.I32, 19),
			thrift.NewTField("key_cache_save_period_in_seconds", thrift.I32, 20),
			thrift.NewTField("memtable_flush_after_mins", thrift.I32, 21),
			thrift.NewTField("memtable_throughput_in_mb", thrift.I32, 22),
			thrift.NewTField("memtable_operations_in_millions", thrift.DOUBLE, 23),
			thrift.NewTField("merge_shards_chance", thrift.DOUBLE, 25),
			thrift.NewTField("row_cache_provider", thrift.STRING, 27),
			thrift.NewTField("row_cache_keys_to_save", thrift.I32, 31),
		}),
	}
	{
		output.ColumnType = "Standard"
		output.ComparatorType = "BytesType"
		output.Caching = "keys_only"
		output.DclocalReadRepairChance = 0
		output.SpeculativeRetry = "NONE"
	}
	return output
}

func (p *CfDef) IsSetColumnType() bool {
	return p.ColumnType != "Standard"
}

func (p *CfDef) IsSetComparatorType() bool {
	return p.ComparatorType != "BytesType"
}

func (p *CfDef) IsSetSubcomparatorType() bool {
	return p.SubcomparatorType != ""
}

func (p *CfDef) IsSetComment() bool {
	return p.Comment != ""
}

func (p *CfDef) IsSetReadRepairChance() bool {
	return p.ReadRepairChance != 0
}

func (p *CfDef) IsSetColumnMetadata() bool {
	return p.ColumnMetadata != nil && p.ColumnMetadata.Len() > 0
}

func (p *CfDef) IsSetGcGraceSeconds() bool {
	return p.GcGraceSeconds != 0
}

func (p *CfDef) IsSetDefaultValidationClass() bool {
	return p.DefaultValidationClass != ""
}

func (p *CfDef) IsSetId() bool {
	return p.Id != 0
}

func (p *CfDef) IsSetMinCompactionThreshold() bool {
	return p.MinCompactionThreshold != 0
}

func (p *CfDef) IsSetMaxCompactionThreshold() bool {
	return p.MaxCompactionThreshold != 0
}

func (p *CfDef) IsSetReplicateOnWrite() bool {
	return p.ReplicateOnWrite != false
}

func (p *CfDef) IsSetKeyValidationClass() bool {
	return p.KeyValidationClass != ""
}

func (p *CfDef) IsSetKeyAlias() bool {
	return p.KeyAlias != nil
}

func (p *CfDef) IsSetCompactionStrategy() bool {
	return p.CompactionStrategy != ""
}

func (p *CfDef) IsSetCompactionStrategyOptions() bool {
	return p.CompactionStrategyOptions != nil && p.CompactionStrategyOptions.Len() > 0
}

func (p *CfDef) IsSetCompressionOptions() bool {
	return p.CompressionOptions != nil && p.CompressionOptions.Len() > 0
}

func (p *CfDef) IsSetBloomFilterFpChance() bool {
	return p.BloomFilterFpChance != 0
}

func (p *CfDef) IsSetCaching() bool {
	return p.Caching != "keys_only"
}

func (p *CfDef) IsSetDclocalReadRepairChance() bool {
	return p.DclocalReadRepairChance != 0
}

func (p *CfDef) IsSetPopulateIoCacheOnFlush() bool {
	return p.PopulateIoCacheOnFlush != false
}

func (p *CfDef) IsSetMemtableFlushPeriodInMs() bool {
	return p.MemtableFlushPeriodInMs != 0
}

func (p *CfDef) IsSetDefaultTimeToLive() bool {
	return p.DefaultTimeToLive != 0
}

func (p *CfDef) IsSetIndexInterval() bool {
	return p.IndexInterval != 0
}

func (p *CfDef) IsSetSpeculativeRetry() bool {
	return p.SpeculativeRetry != "NONE"
}

func (p *CfDef) IsSetRowCacheSize() bool {
	return p.RowCacheSize != 0
}

func (p *CfDef) IsSetKeyCacheSize() bool {
	return p.KeyCacheSize != 0
}

func (p *CfDef) IsSetRowCacheSavePeriodInSeconds() bool {
	return p.RowCacheSavePeriodInSeconds != 0
}

func (p *CfDef) IsSetKeyCacheSavePeriodInSeconds() bool {
	return p.KeyCacheSavePeriodInSeconds != 0
}

func (p *CfDef) IsSetMemtableFlushAfterMins() bool {
	return p.MemtableFlushAfterMins != 0
}

func (p *CfDef) IsSetMemtableThroughputInMb() bool {
	return p.MemtableThroughputInMb != 0
}

func (p *CfDef) IsSetMemtableOperationsInMillions() bool {
	return p.MemtableOperationsInMillions != 0
}

func (p *CfDef) IsSetMergeShardsChance() bool {
	return p.MergeShardsChance != 0
}

func (p *CfDef) IsSetRowCacheProvider() bool {
	return p.RowCacheProvider != ""
}

func (p *CfDef) IsSetRowCacheKeysToSave() bool {
	return p.RowCacheKeysToSave != 0
}

func (p *CfDef) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "keyspace" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "name" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "column_type" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "comparator_type" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 6 || fieldName == "subcomparator_type" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 8 || fieldName == "comment" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 12 || fieldName == "read_repair_chance" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField12(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField12(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 13 || fieldName == "column_metadata" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField13(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField13(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 14 || fieldName == "gc_grace_seconds" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField14(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField14(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 15 || fieldName == "default_validation_class" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField15(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField15(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 16 || fieldName == "id" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField16(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField16(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 17 || fieldName == "min_compaction_threshold" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField17(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField17(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 18 || fieldName == "max_compaction_threshold" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField18(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField18(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 24 || fieldName == "replicate_on_write" {
			if fieldTypeId == thrift.BOOL {
				err = p.ReadField24(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField24(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 26 || fieldName == "key_validation_class" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField26(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField26(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 28 || fieldName == "key_alias" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField28(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField28(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 29 || fieldName == "compaction_strategy" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField29(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField29(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 30 || fieldName == "compaction_strategy_options" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField30(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField30(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 32 || fieldName == "compression_options" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField32(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField32(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 33 || fieldName == "bloom_filter_fp_chance" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField33(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField33(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 34 || fieldName == "caching" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField34(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField34(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 37 || fieldName == "dclocal_read_repair_chance" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField37(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField37(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 38 || fieldName == "populate_io_cache_on_flush" {
			if fieldTypeId == thrift.BOOL {
				err = p.ReadField38(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField38(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 39 || fieldName == "memtable_flush_period_in_ms" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField39(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField39(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 40 || fieldName == "default_time_to_live" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField40(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField40(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 41 || fieldName == "index_interval" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField41(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField41(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 42 || fieldName == "speculative_retry" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField42(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField42(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 9 || fieldName == "row_cache_size" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField9(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField9(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 11 || fieldName == "key_cache_size" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField11(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField11(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 19 || fieldName == "row_cache_save_period_in_seconds" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField19(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField19(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 20 || fieldName == "key_cache_save_period_in_seconds" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField20(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField20(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 21 || fieldName == "memtable_flush_after_mins" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField21(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField21(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 22 || fieldName == "memtable_throughput_in_mb" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField22(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField22(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 23 || fieldName == "memtable_operations_in_millions" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField23(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField23(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 25 || fieldName == "merge_shards_chance" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField25(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField25(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 27 || fieldName == "row_cache_provider" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField27(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField27(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 31 || fieldName == "row_cache_keys_to_save" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField31(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField31(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CfDef) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v262, err263 := iprot.ReadString()
	if err263 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "keyspace", p.ThriftName(), err263)
	}
	p.Keyspace = v262
	return err
}

func (p *CfDef) ReadFieldKeyspace(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *CfDef) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v264, err265 := iprot.ReadString()
	if err265 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "name", p.ThriftName(), err265)
	}
	p.Name = v264
	return err
}

func (p *CfDef) ReadFieldName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *CfDef) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v266, err267 := iprot.ReadString()
	if err267 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column_type", p.ThriftName(), err267)
	}
	p.ColumnType = v266
	return err
}

func (p *CfDef) ReadFieldColumnType(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *CfDef) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v268, err269 := iprot.ReadString()
	if err269 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "comparator_type", p.ThriftName(), err269)
	}
	p.ComparatorType = v268
	return err
}

func (p *CfDef) ReadFieldComparatorType(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *CfDef) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v270, err271 := iprot.ReadString()
	if err271 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "subcomparator_type", p.ThriftName(), err271)
	}
	p.SubcomparatorType = v270
	return err
}

func (p *CfDef) ReadFieldSubcomparatorType(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField6(iprot)
}

func (p *CfDef) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v272, err273 := iprot.ReadString()
	if err273 != nil {
		return thrift.NewTProtocolExceptionReadField(8, "comment", p.ThriftName(), err273)
	}
	p.Comment = v272
	return err
}

func (p *CfDef) ReadFieldComment(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField8(iprot)
}

func (p *CfDef) ReadField12(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v274, err275 := iprot.ReadDouble()
	if err275 != nil {
		return thrift.NewTProtocolExceptionReadField(12, "read_repair_chance", p.ThriftName(), err275)
	}
	p.ReadRepairChance = v274
	return err
}

func (p *CfDef) ReadFieldReadRepairChance(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField12(iprot)
}

func (p *CfDef) ReadField13(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype281, _size278, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ColumnMetadata", "", err)
	}
	p.ColumnMetadata = thrift.NewTList(_etype281, _size278)
	for _i282 := 0; _i282 < _size278; _i282++ {
		_elem283 := NewColumnDef()
		err286 := _elem283.Read(iprot)
		if err286 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem283ColumnDef", err286)
		}
		p.ColumnMetadata.Push(_elem283)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CfDef) ReadFieldColumnMetadata(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField13(iprot)
}

func (p *CfDef) ReadField14(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v287, err288 := iprot.ReadI32()
	if err288 != nil {
		return thrift.NewTProtocolExceptionReadField(14, "gc_grace_seconds", p.ThriftName(), err288)
	}
	p.GcGraceSeconds = v287
	return err
}

func (p *CfDef) ReadFieldGcGraceSeconds(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField14(iprot)
}

func (p *CfDef) ReadField15(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v289, err290 := iprot.ReadString()
	if err290 != nil {
		return thrift.NewTProtocolExceptionReadField(15, "default_validation_class", p.ThriftName(), err290)
	}
	p.DefaultValidationClass = v289
	return err
}

func (p *CfDef) ReadFieldDefaultValidationClass(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField15(iprot)
}

func (p *CfDef) ReadField16(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v291, err292 := iprot.ReadI32()
	if err292 != nil {
		return thrift.NewTProtocolExceptionReadField(16, "id", p.ThriftName(), err292)
	}
	p.Id = v291
	return err
}

func (p *CfDef) ReadFieldId(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField16(iprot)
}

func (p *CfDef) ReadField17(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v293, err294 := iprot.ReadI32()
	if err294 != nil {
		return thrift.NewTProtocolExceptionReadField(17, "min_compaction_threshold", p.ThriftName(), err294)
	}
	p.MinCompactionThreshold = v293
	return err
}

func (p *CfDef) ReadFieldMinCompactionThreshold(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField17(iprot)
}

func (p *CfDef) ReadField18(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v295, err296 := iprot.ReadI32()
	if err296 != nil {
		return thrift.NewTProtocolExceptionReadField(18, "max_compaction_threshold", p.ThriftName(), err296)
	}
	p.MaxCompactionThreshold = v295
	return err
}

func (p *CfDef) ReadFieldMaxCompactionThreshold(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField18(iprot)
}

func (p *CfDef) ReadField24(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v297, err298 := iprot.ReadBool()
	if err298 != nil {
		return thrift.NewTProtocolExceptionReadField(24, "replicate_on_write", p.ThriftName(), err298)
	}
	p.ReplicateOnWrite = v297
	return err
}

func (p *CfDef) ReadFieldReplicateOnWrite(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField24(iprot)
}

func (p *CfDef) ReadField26(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v299, err300 := iprot.ReadString()
	if err300 != nil {
		return thrift.NewTProtocolExceptionReadField(26, "key_validation_class", p.ThriftName(), err300)
	}
	p.KeyValidationClass = v299
	return err
}

func (p *CfDef) ReadFieldKeyValidationClass(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField26(iprot)
}

func (p *CfDef) ReadField28(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v301, err302 := iprot.ReadBinary()
	if err302 != nil {
		return thrift.NewTProtocolExceptionReadField(28, "key_alias", p.ThriftName(), err302)
	}
	p.KeyAlias = v301
	return err
}

func (p *CfDef) ReadFieldKeyAlias(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField28(iprot)
}

func (p *CfDef) ReadField29(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v303, err304 := iprot.ReadString()
	if err304 != nil {
		return thrift.NewTProtocolExceptionReadField(29, "compaction_strategy", p.ThriftName(), err304)
	}
	p.CompactionStrategy = v303
	return err
}

func (p *CfDef) ReadFieldCompactionStrategy(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField29(iprot)
}

func (p *CfDef) ReadField30(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype308, _vtype309, _size307, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.CompactionStrategyOptions", "", err)
	}
	p.CompactionStrategyOptions = thrift.NewTMap(_ktype308, _vtype309, _size307)
	for _i311 := 0; _i311 < _size307; _i311++ {
		v314, err315 := iprot.ReadString()
		if err315 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key312", "", err315)
		}
		_key312 := v314
		v316, err317 := iprot.ReadString()
		if err317 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val313", "", err317)
		}
		_val313 := v316
		p.CompactionStrategyOptions.Set(_key312, _val313)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CfDef) ReadFieldCompactionStrategyOptions(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField30(iprot)
}

func (p *CfDef) ReadField32(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype321, _vtype322, _size320, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.CompressionOptions", "", err)
	}
	p.CompressionOptions = thrift.NewTMap(_ktype321, _vtype322, _size320)
	for _i324 := 0; _i324 < _size320; _i324++ {
		v327, err328 := iprot.ReadString()
		if err328 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key325", "", err328)
		}
		_key325 := v327
		v329, err330 := iprot.ReadString()
		if err330 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val326", "", err330)
		}
		_val326 := v329
		p.CompressionOptions.Set(_key325, _val326)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CfDef) ReadFieldCompressionOptions(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField32(iprot)
}

func (p *CfDef) ReadField33(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v331, err332 := iprot.ReadDouble()
	if err332 != nil {
		return thrift.NewTProtocolExceptionReadField(33, "bloom_filter_fp_chance", p.ThriftName(), err332)
	}
	p.BloomFilterFpChance = v331
	return err
}

func (p *CfDef) ReadFieldBloomFilterFpChance(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField33(iprot)
}

func (p *CfDef) ReadField34(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v333, err334 := iprot.ReadString()
	if err334 != nil {
		return thrift.NewTProtocolExceptionReadField(34, "caching", p.ThriftName(), err334)
	}
	p.Caching = v333
	return err
}

func (p *CfDef) ReadFieldCaching(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField34(iprot)
}

func (p *CfDef) ReadField37(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v335, err336 := iprot.ReadDouble()
	if err336 != nil {
		return thrift.NewTProtocolExceptionReadField(37, "dclocal_read_repair_chance", p.ThriftName(), err336)
	}
	p.DclocalReadRepairChance = v335
	return err
}

func (p *CfDef) ReadFieldDclocalReadRepairChance(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField37(iprot)
}

func (p *CfDef) ReadField38(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v337, err338 := iprot.ReadBool()
	if err338 != nil {
		return thrift.NewTProtocolExceptionReadField(38, "populate_io_cache_on_flush", p.ThriftName(), err338)
	}
	p.PopulateIoCacheOnFlush = v337
	return err
}

func (p *CfDef) ReadFieldPopulateIoCacheOnFlush(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField38(iprot)
}

func (p *CfDef) ReadField39(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v339, err340 := iprot.ReadI32()
	if err340 != nil {
		return thrift.NewTProtocolExceptionReadField(39, "memtable_flush_period_in_ms", p.ThriftName(), err340)
	}
	p.MemtableFlushPeriodInMs = v339
	return err
}

func (p *CfDef) ReadFieldMemtableFlushPeriodInMs(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField39(iprot)
}

func (p *CfDef) ReadField40(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v341, err342 := iprot.ReadI32()
	if err342 != nil {
		return thrift.NewTProtocolExceptionReadField(40, "default_time_to_live", p.ThriftName(), err342)
	}
	p.DefaultTimeToLive = v341
	return err
}

func (p *CfDef) ReadFieldDefaultTimeToLive(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField40(iprot)
}

func (p *CfDef) ReadField41(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v343, err344 := iprot.ReadI32()
	if err344 != nil {
		return thrift.NewTProtocolExceptionReadField(41, "index_interval", p.ThriftName(), err344)
	}
	p.IndexInterval = v343
	return err
}

func (p *CfDef) ReadFieldIndexInterval(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField41(iprot)
}

func (p *CfDef) ReadField42(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v345, err346 := iprot.ReadString()
	if err346 != nil {
		return thrift.NewTProtocolExceptionReadField(42, "speculative_retry", p.ThriftName(), err346)
	}
	p.SpeculativeRetry = v345
	return err
}

func (p *CfDef) ReadFieldSpeculativeRetry(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField42(iprot)
}

func (p *CfDef) ReadField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v347, err348 := iprot.ReadDouble()
	if err348 != nil {
		return thrift.NewTProtocolExceptionReadField(9, "row_cache_size", p.ThriftName(), err348)
	}
	p.RowCacheSize = v347
	return err
}

func (p *CfDef) ReadFieldRowCacheSize(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField9(iprot)
}

func (p *CfDef) ReadField11(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v349, err350 := iprot.ReadDouble()
	if err350 != nil {
		return thrift.NewTProtocolExceptionReadField(11, "key_cache_size", p.ThriftName(), err350)
	}
	p.KeyCacheSize = v349
	return err
}

func (p *CfDef) ReadFieldKeyCacheSize(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField11(iprot)
}

func (p *CfDef) ReadField19(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v351, err352 := iprot.ReadI32()
	if err352 != nil {
		return thrift.NewTProtocolExceptionReadField(19, "row_cache_save_period_in_seconds", p.ThriftName(), err352)
	}
	p.RowCacheSavePeriodInSeconds = v351
	return err
}

func (p *CfDef) ReadFieldRowCacheSavePeriodInSeconds(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField19(iprot)
}

func (p *CfDef) ReadField20(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v353, err354 := iprot.ReadI32()
	if err354 != nil {
		return thrift.NewTProtocolExceptionReadField(20, "key_cache_save_period_in_seconds", p.ThriftName(), err354)
	}
	p.KeyCacheSavePeriodInSeconds = v353
	return err
}

func (p *CfDef) ReadFieldKeyCacheSavePeriodInSeconds(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField20(iprot)
}

func (p *CfDef) ReadField21(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v355, err356 := iprot.ReadI32()
	if err356 != nil {
		return thrift.NewTProtocolExceptionReadField(21, "memtable_flush_after_mins", p.ThriftName(), err356)
	}
	p.MemtableFlushAfterMins = v355
	return err
}

func (p *CfDef) ReadFieldMemtableFlushAfterMins(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField21(iprot)
}

func (p *CfDef) ReadField22(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v357, err358 := iprot.ReadI32()
	if err358 != nil {
		return thrift.NewTProtocolExceptionReadField(22, "memtable_throughput_in_mb", p.ThriftName(), err358)
	}
	p.MemtableThroughputInMb = v357
	return err
}

func (p *CfDef) ReadFieldMemtableThroughputInMb(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField22(iprot)
}

func (p *CfDef) ReadField23(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v359, err360 := iprot.ReadDouble()
	if err360 != nil {
		return thrift.NewTProtocolExceptionReadField(23, "memtable_operations_in_millions", p.ThriftName(), err360)
	}
	p.MemtableOperationsInMillions = v359
	return err
}

func (p *CfDef) ReadFieldMemtableOperationsInMillions(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField23(iprot)
}

func (p *CfDef) ReadField25(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v361, err362 := iprot.ReadDouble()
	if err362 != nil {
		return thrift.NewTProtocolExceptionReadField(25, "merge_shards_chance", p.ThriftName(), err362)
	}
	p.MergeShardsChance = v361
	return err
}

func (p *CfDef) ReadFieldMergeShardsChance(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField25(iprot)
}

func (p *CfDef) ReadField27(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v363, err364 := iprot.ReadString()
	if err364 != nil {
		return thrift.NewTProtocolExceptionReadField(27, "row_cache_provider", p.ThriftName(), err364)
	}
	p.RowCacheProvider = v363
	return err
}

func (p *CfDef) ReadFieldRowCacheProvider(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField27(iprot)
}

func (p *CfDef) ReadField31(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v365, err366 := iprot.ReadI32()
	if err366 != nil {
		return thrift.NewTProtocolExceptionReadField(31, "row_cache_keys_to_save", p.ThriftName(), err366)
	}
	p.RowCacheKeysToSave = v365
	return err
}

func (p *CfDef) ReadFieldRowCacheKeysToSave(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField31(iprot)
}

func (p *CfDef) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CfDef")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField6(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField8(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField9(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField11(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField12(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField13(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField14(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField15(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField16(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField17(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField18(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField19(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField20(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField21(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField22(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField23(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField24(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField25(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField26(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField27(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField28(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField29(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField30(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField31(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField32(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField33(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField34(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField37(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField38(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField39(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField40(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField41(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField42(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CfDef) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("keyspace", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Keyspace))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "keyspace", p.ThriftName(), err)
	}
	return err
}

func (p *CfDef) WriteFieldKeyspace(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *CfDef) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("name", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "name", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Name))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "name", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "name", p.ThriftName(), err)
	}
	return err
}

func (p *CfDef) WriteFieldName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *CfDef) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetColumnType() {
		err = oprot.WriteFieldBegin("column_type", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column_type", p.ThriftName(), err)
		}
		err = oprot.WriteString(string(p.ColumnType))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column_type", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column_type", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldColumnType(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *CfDef) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetComparatorType() {
		err = oprot.WriteFieldBegin("comparator_type", thrift.STRING, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "comparator_type", p.ThriftName(), err)
		}
		err = oprot.WriteString(string(p.ComparatorType))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "comparator_type", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "comparator_type", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldComparatorType(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *CfDef) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetSubcomparatorType() {
		err = oprot.WriteFieldBegin("subcomparator_type", thrift.STRING, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "subcomparator_type", p.ThriftName(), err)
		}
		err = oprot.WriteString(string(p.SubcomparatorType))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "subcomparator_type", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "subcomparator_type", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldSubcomparatorType(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField6(oprot)
}

func (p *CfDef) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetComment() {
		err = oprot.WriteFieldBegin("comment", thrift.STRING, 8)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(8, "comment", p.ThriftName(), err)
		}
		err = oprot.WriteString(string(p.Comment))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(8, "comment", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(8, "comment", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldComment(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField8(oprot)
}

func (p *CfDef) WriteField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetRowCacheSize() {
		err = oprot.WriteFieldBegin("row_cache_size", thrift.DOUBLE, 9)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(9, "row_cache_size", p.ThriftName(), err)
		}
		err = oprot.WriteDouble(float64(p.RowCacheSize))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(9, "row_cache_size", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(9, "row_cache_size", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldRowCacheSize(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField9(oprot)
}

func (p *CfDef) WriteField11(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetKeyCacheSize() {
		err = oprot.WriteFieldBegin("key_cache_size", thrift.DOUBLE, 11)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(11, "key_cache_size", p.ThriftName(), err)
		}
		err = oprot.WriteDouble(float64(p.KeyCacheSize))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(11, "key_cache_size", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(11, "key_cache_size", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldKeyCacheSize(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField11(oprot)
}

func (p *CfDef) WriteField12(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetReadRepairChance() {
		err = oprot.WriteFieldBegin("read_repair_chance", thrift.DOUBLE, 12)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(12, "read_repair_chance", p.ThriftName(), err)
		}
		err = oprot.WriteDouble(float64(p.ReadRepairChance))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(12, "read_repair_chance", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(12, "read_repair_chance", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldReadRepairChance(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField12(oprot)
}

func (p *CfDef) WriteField13(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnMetadata != nil {
		if p.IsSetColumnMetadata() {
			err = oprot.WriteFieldBegin("column_metadata", thrift.LIST, 13)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(13, "column_metadata", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.STRUCT, p.ColumnMetadata.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter367 := range p.ColumnMetadata.Iter() {
				Iter368 := Iter367.(*ColumnDef)
				err = Iter368.Write(oprot)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteStruct("ColumnDef", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(13, "column_metadata", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *CfDef) WriteFieldColumnMetadata(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField13(oprot)
}

func (p *CfDef) WriteField14(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetGcGraceSeconds() {
		err = oprot.WriteFieldBegin("gc_grace_seconds", thrift.I32, 14)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(14, "gc_grace_seconds", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.GcGraceSeconds))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(14, "gc_grace_seconds", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(14, "gc_grace_seconds", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldGcGraceSeconds(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField14(oprot)
}

func (p *CfDef) WriteField15(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetDefaultValidationClass() {
		err = oprot.WriteFieldBegin("default_validation_class", thrift.STRING, 15)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(15, "default_validation_class", p.ThriftName(), err)
		}
		err = oprot.WriteString(string(p.DefaultValidationClass))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(15, "default_validation_class", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(15, "default_validation_class", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldDefaultValidationClass(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField15(oprot)
}

func (p *CfDef) WriteField16(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetId() {
		err = oprot.WriteFieldBegin("id", thrift.I32, 16)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(16, "id", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Id))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(16, "id", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(16, "id", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldId(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField16(oprot)
}

func (p *CfDef) WriteField17(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetMinCompactionThreshold() {
		err = oprot.WriteFieldBegin("min_compaction_threshold", thrift.I32, 17)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(17, "min_compaction_threshold", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.MinCompactionThreshold))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(17, "min_compaction_threshold", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(17, "min_compaction_threshold", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldMinCompactionThreshold(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField17(oprot)
}

func (p *CfDef) WriteField18(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetMaxCompactionThreshold() {
		err = oprot.WriteFieldBegin("max_compaction_threshold", thrift.I32, 18)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(18, "max_compaction_threshold", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.MaxCompactionThreshold))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(18, "max_compaction_threshold", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(18, "max_compaction_threshold", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldMaxCompactionThreshold(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField18(oprot)
}

func (p *CfDef) WriteField19(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetRowCacheSavePeriodInSeconds() {
		err = oprot.WriteFieldBegin("row_cache_save_period_in_seconds", thrift.I32, 19)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(19, "row_cache_save_period_in_seconds", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.RowCacheSavePeriodInSeconds))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(19, "row_cache_save_period_in_seconds", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(19, "row_cache_save_period_in_seconds", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldRowCacheSavePeriodInSeconds(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField19(oprot)
}

func (p *CfDef) WriteField20(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetKeyCacheSavePeriodInSeconds() {
		err = oprot.WriteFieldBegin("key_cache_save_period_in_seconds", thrift.I32, 20)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(20, "key_cache_save_period_in_seconds", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.KeyCacheSavePeriodInSeconds))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(20, "key_cache_save_period_in_seconds", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(20, "key_cache_save_period_in_seconds", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldKeyCacheSavePeriodInSeconds(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField20(oprot)
}

func (p *CfDef) WriteField21(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetMemtableFlushAfterMins() {
		err = oprot.WriteFieldBegin("memtable_flush_after_mins", thrift.I32, 21)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(21, "memtable_flush_after_mins", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.MemtableFlushAfterMins))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(21, "memtable_flush_after_mins", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(21, "memtable_flush_after_mins", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldMemtableFlushAfterMins(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField21(oprot)
}

func (p *CfDef) WriteField22(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetMemtableThroughputInMb() {
		err = oprot.WriteFieldBegin("memtable_throughput_in_mb", thrift.I32, 22)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(22, "memtable_throughput_in_mb", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.MemtableThroughputInMb))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(22, "memtable_throughput_in_mb", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(22, "memtable_throughput_in_mb", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldMemtableThroughputInMb(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField22(oprot)
}

func (p *CfDef) WriteField23(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetMemtableOperationsInMillions() {
		err = oprot.WriteFieldBegin("memtable_operations_in_millions", thrift.DOUBLE, 23)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(23, "memtable_operations_in_millions", p.ThriftName(), err)
		}
		err = oprot.WriteDouble(float64(p.MemtableOperationsInMillions))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(23, "memtable_operations_in_millions", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(23, "memtable_operations_in_millions", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldMemtableOperationsInMillions(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField23(oprot)
}

func (p *CfDef) WriteField24(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetReplicateOnWrite() {
		err = oprot.WriteFieldBegin("replicate_on_write", thrift.BOOL, 24)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(24, "replicate_on_write", p.ThriftName(), err)
		}
		err = oprot.WriteBool(bool(p.ReplicateOnWrite))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(24, "replicate_on_write", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(24, "replicate_on_write", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldReplicateOnWrite(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField24(oprot)
}

func (p *CfDef) WriteField25(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetMergeShardsChance() {
		err = oprot.WriteFieldBegin("merge_shards_chance", thrift.DOUBLE, 25)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(25, "merge_shards_chance", p.ThriftName(), err)
		}
		err = oprot.WriteDouble(float64(p.MergeShardsChance))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(25, "merge_shards_chance", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(25, "merge_shards_chance", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldMergeShardsChance(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField25(oprot)
}

func (p *CfDef) WriteField26(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetKeyValidationClass() {
		err = oprot.WriteFieldBegin("key_validation_class", thrift.STRING, 26)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(26, "key_validation_class", p.ThriftName(), err)
		}
		err = oprot.WriteString(string(p.KeyValidationClass))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(26, "key_validation_class", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(26, "key_validation_class", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldKeyValidationClass(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField26(oprot)
}

func (p *CfDef) WriteField27(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetRowCacheProvider() {
		err = oprot.WriteFieldBegin("row_cache_provider", thrift.STRING, 27)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(27, "row_cache_provider", p.ThriftName(), err)
		}
		err = oprot.WriteString(string(p.RowCacheProvider))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(27, "row_cache_provider", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(27, "row_cache_provider", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldRowCacheProvider(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField27(oprot)
}

func (p *CfDef) WriteField28(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.KeyAlias != nil {
		if p.IsSetKeyAlias() {
			err = oprot.WriteFieldBegin("key_alias", thrift.BINARY, 28)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(28, "key_alias", p.ThriftName(), err)
			}
			err = oprot.WriteBinary(p.KeyAlias)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(28, "key_alias", p.ThriftName(), err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(28, "key_alias", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *CfDef) WriteFieldKeyAlias(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField28(oprot)
}

func (p *CfDef) WriteField29(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetCompactionStrategy() {
		err = oprot.WriteFieldBegin("compaction_strategy", thrift.STRING, 29)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(29, "compaction_strategy", p.ThriftName(), err)
		}
		err = oprot.WriteString(string(p.CompactionStrategy))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(29, "compaction_strategy", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(29, "compaction_strategy", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldCompactionStrategy(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField29(oprot)
}

func (p *CfDef) WriteField30(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.CompactionStrategyOptions != nil {
		if p.IsSetCompactionStrategyOptions() {
			err = oprot.WriteFieldBegin("compaction_strategy_options", thrift.MAP, 30)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(30, "compaction_strategy_options", p.ThriftName(), err)
			}
			err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.CompactionStrategyOptions.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			for Miter369 := range p.CompactionStrategyOptions.Iter() {
				Kiter370, Viter371 := Miter369.Key().(string), Miter369.Value().(string)
				err = oprot.WriteString(string(Kiter370))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Kiter370", "", err)
				}
				err = oprot.WriteString(string(Viter371))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Viter371", "", err)
				}
			}
			err = oprot.WriteMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(30, "compaction_strategy_options", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *CfDef) WriteFieldCompactionStrategyOptions(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField30(oprot)
}

func (p *CfDef) WriteField31(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetRowCacheKeysToSave() {
		err = oprot.WriteFieldBegin("row_cache_keys_to_save", thrift.I32, 31)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(31, "row_cache_keys_to_save", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.RowCacheKeysToSave))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(31, "row_cache_keys_to_save", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(31, "row_cache_keys_to_save", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldRowCacheKeysToSave(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField31(oprot)
}

func (p *CfDef) WriteField32(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.CompressionOptions != nil {
		if p.IsSetCompressionOptions() {
			err = oprot.WriteFieldBegin("compression_options", thrift.MAP, 32)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(32, "compression_options", p.ThriftName(), err)
			}
			err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.CompressionOptions.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			for Miter372 := range p.CompressionOptions.Iter() {
				Kiter373, Viter374 := Miter372.Key().(string), Miter372.Value().(string)
				err = oprot.WriteString(string(Kiter373))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Kiter373", "", err)
				}
				err = oprot.WriteString(string(Viter374))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Viter374", "", err)
				}
			}
			err = oprot.WriteMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(32, "compression_options", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *CfDef) WriteFieldCompressionOptions(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField32(oprot)
}

func (p *CfDef) WriteField33(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetBloomFilterFpChance() {
		err = oprot.WriteFieldBegin("bloom_filter_fp_chance", thrift.DOUBLE, 33)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(33, "bloom_filter_fp_chance", p.ThriftName(), err)
		}
		err = oprot.WriteDouble(float64(p.BloomFilterFpChance))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(33, "bloom_filter_fp_chance", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(33, "bloom_filter_fp_chance", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldBloomFilterFpChance(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField33(oprot)
}

func (p *CfDef) WriteField34(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetCaching() {
		err = oprot.WriteFieldBegin("caching", thrift.STRING, 34)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(34, "caching", p.ThriftName(), err)
		}
		err = oprot.WriteString(string(p.Caching))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(34, "caching", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(34, "caching", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldCaching(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField34(oprot)
}

func (p *CfDef) WriteField37(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetDclocalReadRepairChance() {
		err = oprot.WriteFieldBegin("dclocal_read_repair_chance", thrift.DOUBLE, 37)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(37, "dclocal_read_repair_chance", p.ThriftName(), err)
		}
		err = oprot.WriteDouble(float64(p.DclocalReadRepairChance))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(37, "dclocal_read_repair_chance", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(37, "dclocal_read_repair_chance", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldDclocalReadRepairChance(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField37(oprot)
}

func (p *CfDef) WriteField38(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetPopulateIoCacheOnFlush() {
		err = oprot.WriteFieldBegin("populate_io_cache_on_flush", thrift.BOOL, 38)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(38, "populate_io_cache_on_flush", p.ThriftName(), err)
		}
		err = oprot.WriteBool(bool(p.PopulateIoCacheOnFlush))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(38, "populate_io_cache_on_flush", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(38, "populate_io_cache_on_flush", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldPopulateIoCacheOnFlush(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField38(oprot)
}

func (p *CfDef) WriteField39(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetMemtableFlushPeriodInMs() {
		err = oprot.WriteFieldBegin("memtable_flush_period_in_ms", thrift.I32, 39)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(39, "memtable_flush_period_in_ms", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.MemtableFlushPeriodInMs))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(39, "memtable_flush_period_in_ms", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(39, "memtable_flush_period_in_ms", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldMemtableFlushPeriodInMs(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField39(oprot)
}

func (p *CfDef) WriteField40(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetDefaultTimeToLive() {
		err = oprot.WriteFieldBegin("default_time_to_live", thrift.I32, 40)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(40, "default_time_to_live", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.DefaultTimeToLive))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(40, "default_time_to_live", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(40, "default_time_to_live", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldDefaultTimeToLive(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField40(oprot)
}

func (p *CfDef) WriteField41(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetIndexInterval() {
		err = oprot.WriteFieldBegin("index_interval", thrift.I32, 41)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(41, "index_interval", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.IndexInterval))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(41, "index_interval", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(41, "index_interval", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldIndexInterval(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField41(oprot)
}

func (p *CfDef) WriteField42(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetSpeculativeRetry() {
		err = oprot.WriteFieldBegin("speculative_retry", thrift.STRING, 42)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(42, "speculative_retry", p.ThriftName(), err)
		}
		err = oprot.WriteString(string(p.SpeculativeRetry))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(42, "speculative_retry", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(42, "speculative_retry", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CfDef) WriteFieldSpeculativeRetry(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField42(oprot)
}

func (p *CfDef) TStructName() string {
	return "CfDef"
}

func (p *CfDef) ThriftName() string {
	return "CfDef"
}

func (p *CfDef) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CfDef(%+v)", *p)
}

func (p *CfDef) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*CfDef)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *CfDef) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Keyspace
	case 2:
		return p.Name
	case 3:
		return p.ColumnType
	case 5:
		return p.ComparatorType
	case 6:
		return p.SubcomparatorType
	case 8:
		return p.Comment
	case 12:
		return p.ReadRepairChance
	case 13:
		return p.ColumnMetadata
	case 14:
		return p.GcGraceSeconds
	case 15:
		return p.DefaultValidationClass
	case 16:
		return p.Id
	case 17:
		return p.MinCompactionThreshold
	case 18:
		return p.MaxCompactionThreshold
	case 24:
		return p.ReplicateOnWrite
	case 26:
		return p.KeyValidationClass
	case 28:
		return p.KeyAlias
	case 29:
		return p.CompactionStrategy
	case 30:
		return p.CompactionStrategyOptions
	case 32:
		return p.CompressionOptions
	case 33:
		return p.BloomFilterFpChance
	case 34:
		return p.Caching
	case 37:
		return p.DclocalReadRepairChance
	case 38:
		return p.PopulateIoCacheOnFlush
	case 39:
		return p.MemtableFlushPeriodInMs
	case 40:
		return p.DefaultTimeToLive
	case 41:
		return p.IndexInterval
	case 42:
		return p.SpeculativeRetry
	case 9:
		return p.RowCacheSize
	case 11:
		return p.KeyCacheSize
	case 19:
		return p.RowCacheSavePeriodInSeconds
	case 20:
		return p.KeyCacheSavePeriodInSeconds
	case 21:
		return p.MemtableFlushAfterMins
	case 22:
		return p.MemtableThroughputInMb
	case 23:
		return p.MemtableOperationsInMillions
	case 25:
		return p.MergeShardsChance
	case 27:
		return p.RowCacheProvider
	case 31:
		return p.RowCacheKeysToSave
	}
	return nil
}

func (p *CfDef) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("keyspace", thrift.STRING, 1),
		thrift.NewTField("name", thrift.STRING, 2),
		thrift.NewTField("column_type", thrift.STRING, 3),
		thrift.NewTField("comparator_type", thrift.STRING, 5),
		thrift.NewTField("subcomparator_type", thrift.STRING, 6),
		thrift.NewTField("comment", thrift.STRING, 8),
		thrift.NewTField("read_repair_chance", thrift.DOUBLE, 12),
		thrift.NewTField("column_metadata", thrift.LIST, 13),
		thrift.NewTField("gc_grace_seconds", thrift.I32, 14),
		thrift.NewTField("default_validation_class", thrift.STRING, 15),
		thrift.NewTField("id", thrift.I32, 16),
		thrift.NewTField("min_compaction_threshold", thrift.I32, 17),
		thrift.NewTField("max_compaction_threshold", thrift.I32, 18),
		thrift.NewTField("replicate_on_write", thrift.BOOL, 24),
		thrift.NewTField("key_validation_class", thrift.STRING, 26),
		thrift.NewTField("key_alias", thrift.BINARY, 28),
		thrift.NewTField("compaction_strategy", thrift.STRING, 29),
		thrift.NewTField("compaction_strategy_options", thrift.MAP, 30),
		thrift.NewTField("compression_options", thrift.MAP, 32),
		thrift.NewTField("bloom_filter_fp_chance", thrift.DOUBLE, 33),
		thrift.NewTField("caching", thrift.STRING, 34),
		thrift.NewTField("dclocal_read_repair_chance", thrift.DOUBLE, 37),
		thrift.NewTField("populate_io_cache_on_flush", thrift.BOOL, 38),
		thrift.NewTField("memtable_flush_period_in_ms", thrift.I32, 39),
		thrift.NewTField("default_time_to_live", thrift.I32, 40),
		thrift.NewTField("index_interval", thrift.I32, 41),
		thrift.NewTField("speculative_retry", thrift.STRING, 42),
		thrift.NewTField("row_cache_size", thrift.DOUBLE, 9),
		thrift.NewTField("key_cache_size", thrift.DOUBLE, 11),
		thrift.NewTField("row_cache_save_period_in_seconds", thrift.I32, 19),
		thrift.NewTField("key_cache_save_period_in_seconds", thrift.I32, 20),
		thrift.NewTField("memtable_flush_after_mins", thrift.I32, 21),
		thrift.NewTField("memtable_throughput_in_mb", thrift.I32, 22),
		thrift.NewTField("memtable_operations_in_millions", thrift.DOUBLE, 23),
		thrift.NewTField("merge_shards_chance", thrift.DOUBLE, 25),
		thrift.NewTField("row_cache_provider", thrift.STRING, 27),
		thrift.NewTField("row_cache_keys_to_save", thrift.I32, 31),
	})
}

/**
 * Attributes:
 *  - Name
 *  - StrategyClass
 *  - StrategyOptions
 *  - ReplicationFactor: @deprecated ignored
 *  - CfDefs
 *  - DurableWrites
 */
type KsDef struct {
	thrift.TStruct
	Name              string       "name"               // 1
	StrategyClass     string       "strategy_class"     // 2
	StrategyOptions   thrift.TMap  "strategy_options"   // 3
	ReplicationFactor int32        "replication_factor" // 4
	CfDefs            thrift.TList "cf_defs"            // 5
	DurableWrites     bool         "durable_writes"     // 6
}

func NewKsDef() *KsDef {
	output := &KsDef{
		TStruct: thrift.NewTStruct("KsDef", []thrift.TField{
			thrift.NewTField("name", thrift.STRING, 1),
			thrift.NewTField("strategy_class", thrift.STRING, 2),
			thrift.NewTField("strategy_options", thrift.MAP, 3),
			thrift.NewTField("replication_factor", thrift.I32, 4),
			thrift.NewTField("cf_defs", thrift.LIST, 5),
			thrift.NewTField("durable_writes", thrift.BOOL, 6),
		}),
	}
	{
		output.DurableWrites = true
	}
	return output
}

func (p *KsDef) IsSetStrategyOptions() bool {
	return p.StrategyOptions != nil && p.StrategyOptions.Len() > 0
}

func (p *KsDef) IsSetReplicationFactor() bool {
	return p.ReplicationFactor != 0
}

func (p *KsDef) IsSetDurableWrites() bool {
	return p.DurableWrites != true
}

func (p *KsDef) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "name" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "strategy_class" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "strategy_options" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "replication_factor" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "cf_defs" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 6 || fieldName == "durable_writes" {
			if fieldTypeId == thrift.BOOL {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *KsDef) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v375, err376 := iprot.ReadString()
	if err376 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err376)
	}
	p.Name = v375
	return err
}

func (p *KsDef) ReadFieldName(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *KsDef) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v377, err378 := iprot.ReadString()
	if err378 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "strategy_class", p.ThriftName(), err378)
	}
	p.StrategyClass = v377
	return err
}

func (p *KsDef) ReadFieldStrategyClass(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *KsDef) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype382, _vtype383, _size381, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.StrategyOptions", "", err)
	}
	p.StrategyOptions = thrift.NewTMap(_ktype382, _vtype383, _size381)
	for _i385 := 0; _i385 < _size381; _i385++ {
		v388, err389 := iprot.ReadString()
		if err389 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key386", "", err389)
		}
		_key386 := v388
		v390, err391 := iprot.ReadString()
		if err391 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val387", "", err391)
		}
		_val387 := v390
		p.StrategyOptions.Set(_key386, _val387)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *KsDef) ReadFieldStrategyOptions(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *KsDef) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v392, err393 := iprot.ReadI32()
	if err393 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "replication_factor", p.ThriftName(), err393)
	}
	p.ReplicationFactor = v392
	return err
}

func (p *KsDef) ReadFieldReplicationFactor(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *KsDef) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype399, _size396, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.CfDefs", "", err)
	}
	p.CfDefs = thrift.NewTList(_etype399, _size396)
	for _i400 := 0; _i400 < _size396; _i400++ {
		_elem401 := NewCfDef()
		err404 := _elem401.Read(iprot)
		if err404 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem401CfDef", err404)
		}
		p.CfDefs.Push(_elem401)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *KsDef) ReadFieldCfDefs(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *KsDef) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v405, err406 := iprot.ReadBool()
	if err406 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "durable_writes", p.ThriftName(), err406)
	}
	p.DurableWrites = v405
	return err
}

func (p *KsDef) ReadFieldDurableWrites(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField6(iprot)
}

func (p *KsDef) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("KsDef")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField6(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *KsDef) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Name))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err)
	}
	return err
}

func (p *KsDef) WriteFieldName(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *KsDef) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("strategy_class", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "strategy_class", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.StrategyClass))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "strategy_class", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "strategy_class", p.ThriftName(), err)
	}
	return err
}

func (p *KsDef) WriteFieldStrategyClass(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *KsDef) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StrategyOptions != nil {
		if p.IsSetStrategyOptions() {
			err = oprot.WriteFieldBegin("strategy_options", thrift.MAP, 3)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(3, "strategy_options", p.ThriftName(), err)
			}
			err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.StrategyOptions.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			for Miter407 := range p.StrategyOptions.Iter() {
				Kiter408, Viter409 := Miter407.Key().(string), Miter407.Value().(string)
				err = oprot.WriteString(string(Kiter408))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Kiter408", "", err)
				}
				err = oprot.WriteString(string(Viter409))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Viter409", "", err)
				}
			}
			err = oprot.WriteMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(3, "strategy_options", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *KsDef) WriteFieldStrategyOptions(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *KsDef) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetReplicationFactor() {
		err = oprot.WriteFieldBegin("replication_factor", thrift.I32, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "replication_factor", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.ReplicationFactor))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "replication_factor", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "replication_factor", p.ThriftName(), err)
		}
	}
	return err
}

func (p *KsDef) WriteFieldReplicationFactor(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *KsDef) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.CfDefs != nil {
		err = oprot.WriteFieldBegin("cf_defs", thrift.LIST, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "cf_defs", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.CfDefs.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter410 := range p.CfDefs.Iter() {
			Iter411 := Iter410.(*CfDef)
			err = Iter411.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("CfDef", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "cf_defs", p.ThriftName(), err)
		}
	}
	return err
}

func (p *KsDef) WriteFieldCfDefs(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *KsDef) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetDurableWrites() {
		err = oprot.WriteFieldBegin("durable_writes", thrift.BOOL, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "durable_writes", p.ThriftName(), err)
		}
		err = oprot.WriteBool(bool(p.DurableWrites))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "durable_writes", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "durable_writes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *KsDef) WriteFieldDurableWrites(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField6(oprot)
}

func (p *KsDef) TStructName() string {
	return "KsDef"
}

func (p *KsDef) ThriftName() string {
	return "KsDef"
}

func (p *KsDef) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KsDef(%+v)", *p)
}

func (p *KsDef) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*KsDef)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *KsDef) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Name
	case 2:
		return p.StrategyClass
	case 3:
		return p.StrategyOptions
	case 4:
		return p.ReplicationFactor
	case 5:
		return p.CfDefs
	case 6:
		return p.DurableWrites
	}
	return nil
}

func (p *KsDef) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("name", thrift.STRING, 1),
		thrift.NewTField("strategy_class", thrift.STRING, 2),
		thrift.NewTField("strategy_options", thrift.MAP, 3),
		thrift.NewTField("replication_factor", thrift.I32, 4),
		thrift.NewTField("cf_defs", thrift.LIST, 5),
		thrift.NewTField("durable_writes", thrift.BOOL, 6),
	})
}

/**
 * Row returned from a CQL query
 * 
 * Attributes:
 *  - Key
 *  - Columns
 */
type CqlRow struct {
	thrift.TStruct
	Key     []byte       "key"     // 1
	Columns thrift.TList "columns" // 2
}

func NewCqlRow() *CqlRow {
	output := &CqlRow{
		TStruct: thrift.NewTStruct("CqlRow", []thrift.TField{
			thrift.NewTField("key", thrift.BINARY, 1),
			thrift.NewTField("columns", thrift.LIST, 2),
		}),
	}
	{
	}
	return output
}

func (p *CqlRow) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "key" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "columns" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CqlRow) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v412, err413 := iprot.ReadBinary()
	if err413 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "key", p.ThriftName(), err413)
	}
	p.Key = v412
	return err
}

func (p *CqlRow) ReadFieldKey(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *CqlRow) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype419, _size416, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	p.Columns = thrift.NewTList(_etype419, _size416)
	for _i420 := 0; _i420 < _size416; _i420++ {
		_elem421 := NewColumn()
		err424 := _elem421.Read(iprot)
		if err424 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem421Column", err424)
		}
		p.Columns.Push(_elem421)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CqlRow) ReadFieldColumns(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *CqlRow) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CqlRow")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CqlRow) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Key != nil {
		err = oprot.WriteFieldBegin("key", thrift.BINARY, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Key)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "key", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CqlRow) WriteFieldKey(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *CqlRow) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Columns.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter425 := range p.Columns.Iter() {
			Iter426 := Iter425.(*Column)
			err = Iter426.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Column", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CqlRow) WriteFieldColumns(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *CqlRow) TStructName() string {
	return "CqlRow"
}

func (p *CqlRow) ThriftName() string {
	return "CqlRow"
}

func (p *CqlRow) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CqlRow(%+v)", *p)
}

func (p *CqlRow) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*CqlRow)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *CqlRow) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Key
	case 2:
		return p.Columns
	}
	return nil
}

func (p *CqlRow) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("key", thrift.BINARY, 1),
		thrift.NewTField("columns", thrift.LIST, 2),
	})
}

/**
 * Attributes:
 *  - NameTypes
 *  - ValueTypes
 *  - DefaultNameType
 *  - DefaultValueType
 */
type CqlMetadata struct {
	thrift.TStruct
	NameTypes        thrift.TMap "name_types"         // 1
	ValueTypes       thrift.TMap "value_types"        // 2
	DefaultNameType  string      "default_name_type"  // 3
	DefaultValueType string      "default_value_type" // 4
}

func NewCqlMetadata() *CqlMetadata {
	output := &CqlMetadata{
		TStruct: thrift.NewTStruct("CqlMetadata", []thrift.TField{
			thrift.NewTField("name_types", thrift.MAP, 1),
			thrift.NewTField("value_types", thrift.MAP, 2),
			thrift.NewTField("default_name_type", thrift.STRING, 3),
			thrift.NewTField("default_value_type", thrift.STRING, 4),
		}),
	}
	{
	}
	return output
}

func (p *CqlMetadata) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "name_types" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "value_types" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "default_name_type" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "default_value_type" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CqlMetadata) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype430, _vtype431, _size429, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.NameTypes", "", err)
	}
	p.NameTypes = thrift.NewTMap(_ktype430, _vtype431, _size429)
	for _i433 := 0; _i433 < _size429; _i433++ {
		v436, err437 := iprot.ReadBinary()
		if err437 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key434", "", err437)
		}
		_key434 := v436
		v438, err439 := iprot.ReadString()
		if err439 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val435", "", err439)
		}
		_val435 := v438
		p.NameTypes.Set(_key434, _val435)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CqlMetadata) ReadFieldNameTypes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *CqlMetadata) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype443, _vtype444, _size442, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ValueTypes", "", err)
	}
	p.ValueTypes = thrift.NewTMap(_ktype443, _vtype444, _size442)
	for _i446 := 0; _i446 < _size442; _i446++ {
		v449, err450 := iprot.ReadBinary()
		if err450 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key447", "", err450)
		}
		_key447 := v449
		v451, err452 := iprot.ReadString()
		if err452 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val448", "", err452)
		}
		_val448 := v451
		p.ValueTypes.Set(_key447, _val448)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CqlMetadata) ReadFieldValueTypes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *CqlMetadata) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v453, err454 := iprot.ReadString()
	if err454 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "default_name_type", p.ThriftName(), err454)
	}
	p.DefaultNameType = v453
	return err
}

func (p *CqlMetadata) ReadFieldDefaultNameType(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *CqlMetadata) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v455, err456 := iprot.ReadString()
	if err456 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "default_value_type", p.ThriftName(), err456)
	}
	p.DefaultValueType = v455
	return err
}

func (p *CqlMetadata) ReadFieldDefaultValueType(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *CqlMetadata) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CqlMetadata")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CqlMetadata) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.NameTypes != nil {
		err = oprot.WriteFieldBegin("name_types", thrift.MAP, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name_types", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.STRING, p.NameTypes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter457 := range p.NameTypes.Iter() {
			Kiter458, Viter459 := Miter457.Key().([]byte), Miter457.Value().(string)
			err = oprot.WriteBinary(Kiter458)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter458", "", err)
			}
			err = oprot.WriteString(string(Viter459))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter459", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "name_types", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CqlMetadata) WriteFieldNameTypes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *CqlMetadata) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ValueTypes != nil {
		err = oprot.WriteFieldBegin("value_types", thrift.MAP, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "value_types", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.STRING, p.ValueTypes.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter460 := range p.ValueTypes.Iter() {
			Kiter461, Viter462 := Miter460.Key().([]byte), Miter460.Value().(string)
			err = oprot.WriteBinary(Kiter461)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter461", "", err)
			}
			err = oprot.WriteString(string(Viter462))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter462", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "value_types", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CqlMetadata) WriteFieldValueTypes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *CqlMetadata) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("default_name_type", thrift.STRING, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "default_name_type", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.DefaultNameType))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "default_name_type", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "default_name_type", p.ThriftName(), err)
	}
	return err
}

func (p *CqlMetadata) WriteFieldDefaultNameType(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *CqlMetadata) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("default_value_type", thrift.STRING, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "default_value_type", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.DefaultValueType))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "default_value_type", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "default_value_type", p.ThriftName(), err)
	}
	return err
}

func (p *CqlMetadata) WriteFieldDefaultValueType(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *CqlMetadata) TStructName() string {
	return "CqlMetadata"
}

func (p *CqlMetadata) ThriftName() string {
	return "CqlMetadata"
}

func (p *CqlMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CqlMetadata(%+v)", *p)
}

func (p *CqlMetadata) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*CqlMetadata)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *CqlMetadata) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.NameTypes
	case 2:
		return p.ValueTypes
	case 3:
		return p.DefaultNameType
	case 4:
		return p.DefaultValueType
	}
	return nil
}

func (p *CqlMetadata) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("name_types", thrift.MAP, 1),
		thrift.NewTField("value_types", thrift.MAP, 2),
		thrift.NewTField("default_name_type", thrift.STRING, 3),
		thrift.NewTField("default_value_type", thrift.STRING, 4),
	})
}

/**
 * Attributes:
 *  - TypeA1
 *  - Rows
 *  - Num
 *  - Schema
 */
type CqlResult struct {
	thrift.TStruct
	TypeA1 CqlResultType "type"   // 1
	Rows   thrift.TList  "rows"   // 2
	Num    int32         "num"    // 3
	Schema *CqlMetadata  "schema" // 4
}

func NewCqlResult() *CqlResult {
	output := &CqlResult{
		TStruct: thrift.NewTStruct("CqlResult", []thrift.TField{
			thrift.NewTField("type", thrift.I32, 1),
			thrift.NewTField("rows", thrift.LIST, 2),
			thrift.NewTField("num", thrift.I32, 3),
			thrift.NewTField("schema", thrift.STRUCT, 4),
		}),
	}
	{
		output.TypeA1 = math.MinInt32 - 1
	}
	return output
}

func (p *CqlResult) IsSetTypeA1() bool {
	return int64(p.TypeA1) != math.MinInt32-1
}

func (p *CqlResult) IsSetRows() bool {
	return p.Rows != nil && p.Rows.Len() > 0
}

func (p *CqlResult) IsSetNum() bool {
	return p.Num != 0
}

func (p *CqlResult) IsSetSchema() bool {
	return p.Schema != nil
}

func (p *CqlResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "type" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "rows" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "num" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "schema" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CqlResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v463, err464 := iprot.ReadI32()
	if err464 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "type", p.ThriftName(), err464)
	}
	p.TypeA1 = CqlResultType(v463)
	return err
}

func (p *CqlResult) ReadFieldType(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *CqlResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype470, _size467, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
	}
	p.Rows = thrift.NewTList(_etype470, _size467)
	for _i471 := 0; _i471 < _size467; _i471++ {
		_elem472 := NewCqlRow()
		err475 := _elem472.Read(iprot)
		if err475 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem472CqlRow", err475)
		}
		p.Rows.Push(_elem472)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CqlResult) ReadFieldRows(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *CqlResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v476, err477 := iprot.ReadI32()
	if err477 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "num", p.ThriftName(), err477)
	}
	p.Num = v476
	return err
}

func (p *CqlResult) ReadFieldNum(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *CqlResult) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Schema = NewCqlMetadata()
	err480 := p.Schema.Read(iprot)
	if err480 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SchemaCqlMetadata", err480)
	}
	return err
}

func (p *CqlResult) ReadFieldSchema(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *CqlResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CqlResult")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CqlResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetTypeA1() {
		err = oprot.WriteFieldBegin("type", thrift.I32, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "type", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.TypeA1))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "type", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "type", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CqlResult) WriteFieldType(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *CqlResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Rows != nil {
		if p.IsSetRows() {
			err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.STRUCT, p.Rows.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter481 := range p.Rows.Iter() {
				Iter482 := Iter481.(*CqlRow)
				err = Iter482.Write(oprot)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteStruct("CqlRow", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *CqlResult) WriteFieldRows(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *CqlResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetNum() {
		err = oprot.WriteFieldBegin("num", thrift.I32, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "num", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Num))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "num", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "num", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CqlResult) WriteFieldNum(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *CqlResult) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Schema != nil {
		if p.IsSetSchema() {
			err = oprot.WriteFieldBegin("schema", thrift.STRUCT, 4)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "schema", p.ThriftName(), err)
			}
			err = p.Schema.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("CqlMetadata", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "schema", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *CqlResult) WriteFieldSchema(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *CqlResult) TStructName() string {
	return "CqlResult"
}

func (p *CqlResult) ThriftName() string {
	return "CqlResult"
}

func (p *CqlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CqlResult(%+v)", *p)
}

func (p *CqlResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*CqlResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *CqlResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TypeA1
	case 2:
		return p.Rows
	case 3:
		return p.Num
	case 4:
		return p.Schema
	}
	return nil
}

func (p *CqlResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("type", thrift.I32, 1),
		thrift.NewTField("rows", thrift.LIST, 2),
		thrift.NewTField("num", thrift.I32, 3),
		thrift.NewTField("schema", thrift.STRUCT, 4),
	})
}

/**
 * Attributes:
 *  - ItemId
 *  - Count
 *  - VariableTypes
 *  - VariableNames
 */
type CqlPreparedResult struct {
	thrift.TStruct
	ItemId        int32        "itemId"         // 1
	Count         int32        "count"          // 2
	VariableTypes thrift.TList "variable_types" // 3
	VariableNames thrift.TList "variable_names" // 4
}

func NewCqlPreparedResult() *CqlPreparedResult {
	output := &CqlPreparedResult{
		TStruct: thrift.NewTStruct("CqlPreparedResult", []thrift.TField{
			thrift.NewTField("itemId", thrift.I32, 1),
			thrift.NewTField("count", thrift.I32, 2),
			thrift.NewTField("variable_types", thrift.LIST, 3),
			thrift.NewTField("variable_names", thrift.LIST, 4),
		}),
	}
	{
	}
	return output
}

func (p *CqlPreparedResult) IsSetVariableTypes() bool {
	return p.VariableTypes != nil && p.VariableTypes.Len() > 0
}

func (p *CqlPreparedResult) IsSetVariableNames() bool {
	return p.VariableNames != nil && p.VariableNames.Len() > 0
}

func (p *CqlPreparedResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "itemId" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "count" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "variable_types" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "variable_names" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CqlPreparedResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v483, err484 := iprot.ReadI32()
	if err484 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "itemId", p.ThriftName(), err484)
	}
	p.ItemId = v483
	return err
}

func (p *CqlPreparedResult) ReadFieldItemId(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *CqlPreparedResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v485, err486 := iprot.ReadI32()
	if err486 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "count", p.ThriftName(), err486)
	}
	p.Count = v485
	return err
}

func (p *CqlPreparedResult) ReadFieldCount(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *CqlPreparedResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype492, _size489, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.VariableTypes", "", err)
	}
	p.VariableTypes = thrift.NewTList(_etype492, _size489)
	for _i493 := 0; _i493 < _size489; _i493++ {
		v495, err496 := iprot.ReadString()
		if err496 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem494", "", err496)
		}
		_elem494 := v495
		p.VariableTypes.Push(_elem494)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CqlPreparedResult) ReadFieldVariableTypes(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *CqlPreparedResult) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype502, _size499, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.VariableNames", "", err)
	}
	p.VariableNames = thrift.NewTList(_etype502, _size499)
	for _i503 := 0; _i503 < _size499; _i503++ {
		v505, err506 := iprot.ReadString()
		if err506 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem504", "", err506)
		}
		_elem504 := v505
		p.VariableNames.Push(_elem504)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CqlPreparedResult) ReadFieldVariableNames(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *CqlPreparedResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CqlPreparedResult")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CqlPreparedResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("itemId", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "itemId", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.ItemId))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "itemId", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "itemId", p.ThriftName(), err)
	}
	return err
}

func (p *CqlPreparedResult) WriteFieldItemId(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *CqlPreparedResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("count", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "count", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Count))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "count", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "count", p.ThriftName(), err)
	}
	return err
}

func (p *CqlPreparedResult) WriteFieldCount(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *CqlPreparedResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.VariableTypes != nil {
		if p.IsSetVariableTypes() {
			err = oprot.WriteFieldBegin("variable_types", thrift.LIST, 3)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(3, "variable_types", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.STRING, p.VariableTypes.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter507 := range p.VariableTypes.Iter() {
				Iter508 := Iter507.(string)
				err = oprot.WriteString(string(Iter508))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter508", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(3, "variable_types", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *CqlPreparedResult) WriteFieldVariableTypes(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *CqlPreparedResult) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.VariableNames != nil {
		if p.IsSetVariableNames() {
			err = oprot.WriteFieldBegin("variable_names", thrift.LIST, 4)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "variable_names", p.ThriftName(), err)
			}
			err = oprot.WriteListBegin(thrift.STRING, p.VariableNames.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter509 := range p.VariableNames.Iter() {
				Iter510 := Iter509.(string)
				err = oprot.WriteString(string(Iter510))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter510", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteFieldEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(4, "variable_names", p.ThriftName(), err)
			}
		}
	}
	return err
}

func (p *CqlPreparedResult) WriteFieldVariableNames(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *CqlPreparedResult) TStructName() string {
	return "CqlPreparedResult"
}

func (p *CqlPreparedResult) ThriftName() string {
	return "CqlPreparedResult"
}

func (p *CqlPreparedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CqlPreparedResult(%+v)", *p)
}

func (p *CqlPreparedResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*CqlPreparedResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *CqlPreparedResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ItemId
	case 2:
		return p.Count
	case 3:
		return p.VariableTypes
	case 4:
		return p.VariableNames
	}
	return nil
}

func (p *CqlPreparedResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("itemId", thrift.I32, 1),
		thrift.NewTField("count", thrift.I32, 2),
		thrift.NewTField("variable_types", thrift.LIST, 3),
		thrift.NewTField("variable_names", thrift.LIST, 4),
	})
}

/**
 * Represents input splits used by hadoop ColumnFamilyRecordReaders
 * 
 * Attributes:
 *  - StartToken
 *  - EndToken
 *  - RowCount
 */
type CfSplit struct {
	thrift.TStruct
	StartToken string "start_token" // 1
	EndToken   string "end_token"   // 2
	RowCount   int64  "row_count"   // 3
}

func NewCfSplit() *CfSplit {
	output := &CfSplit{
		TStruct: thrift.NewTStruct("CfSplit", []thrift.TField{
			thrift.NewTField("start_token", thrift.STRING, 1),
			thrift.NewTField("end_token", thrift.STRING, 2),
			thrift.NewTField("row_count", thrift.I64, 3),
		}),
	}
	{
	}
	return output
}

func (p *CfSplit) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(p.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = p.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "start_token" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "end_token" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "row_count" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CfSplit) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v511, err512 := iprot.ReadString()
	if err512 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "start_token", p.ThriftName(), err512)
	}
	p.StartToken = v511
	return err
}

func (p *CfSplit) ReadFieldStartToken(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *CfSplit) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v513, err514 := iprot.ReadString()
	if err514 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "end_token", p.ThriftName(), err514)
	}
	p.EndToken = v513
	return err
}

func (p *CfSplit) ReadFieldEndToken(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *CfSplit) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v515, err516 := iprot.ReadI64()
	if err516 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "row_count", p.ThriftName(), err516)
	}
	p.RowCount = v515
	return err
}

func (p *CfSplit) ReadFieldRowCount(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *CfSplit) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CfSplit")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CfSplit) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("start_token", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "start_token", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.StartToken))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "start_token", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "start_token", p.ThriftName(), err)
	}
	return err
}

func (p *CfSplit) WriteFieldStartToken(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *CfSplit) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("end_token", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "end_token", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.EndToken))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "end_token", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "end_token", p.ThriftName(), err)
	}
	return err
}

func (p *CfSplit) WriteFieldEndToken(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *CfSplit) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("row_count", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "row_count", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.RowCount))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "row_count", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "row_count", p.ThriftName(), err)
	}
	return err
}

func (p *CfSplit) WriteFieldRowCount(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *CfSplit) TStructName() string {
	return "CfSplit"
}

func (p *CfSplit) ThriftName() string {
	return "CfSplit"
}

func (p *CfSplit) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CfSplit(%+v)", *p)
}

func (p *CfSplit) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*CfSplit)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *CfSplit) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.StartToken
	case 2:
		return p.EndToken
	case 3:
		return p.RowCount
	}
	return nil
}

func (p *CfSplit) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("start_token", thrift.STRING, 1),
		thrift.NewTField("end_token", thrift.STRING, 2),
		thrift.NewTField("row_count", thrift.I64, 3),
	})
}

const String_VERSION = "19.36.0"

func init() {
}
